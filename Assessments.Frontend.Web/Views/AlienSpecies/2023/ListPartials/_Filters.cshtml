@model AlienSpeciesListViewModel;
@using static Assessments.Frontend.Web.Infrastructure.Constants;
@using static Assessments.Frontend.Web.Infrastructure.Helpers;
@using static Assessments.Frontend.Web.Infrastructure.AlienSpecies.FilterHelpers;
@using System.Linq;

@{
    Areas.AreaItem[] AllAreas = Areas.AlienSpecies2023Areas;
    Categories.CategoryItem[] AllCategories = Categories.AlienSpecies2023Categories;
    //var AllCriterias = ViewBag.AllCriterias;
    Regions.RegionItem[] AllRegions = Regions.AlienSpecies2023Regions;
    Regions.RegionItem[] AllWaterRegions = Regions.AlienSpecies2023WaterRegions;
    Habitat.HabitatItem[] AllHabitats = Habitat.AlienSpecies2023Habitats;
    Dictionary<string, string> AllTaxonRanks = getAllTaxonRanks();
    ProductionSpecies.ProductionSpeciesItem[] AllProductionSpecies = ProductionSpecies.AlienSpecies2023ProductionSpecies;
    SpeciesGroups.SpeciesGroupItem[] AllSpeciesGroups = SpeciesGroups.AlienSpecies2023SpeciesGroups;

    ControlButtonsViewModel controlButtonsViewModel = new ControlButtonsViewModel
    {
        View = Model.Parameters.View,
        ItemCount = Model.Results.TotalItemCount,
    };
}

@functions{
    void InputTag(string id, string _class, string name, string[] elements, string value)
    {
        name = $"Parameters.{name}";
        if (id == "remember_scroll")
        {
            foreach (var item in elements)
                if (item.Contains("scroll_"))
                    value = item.Replace("scroll_", "");
        }
        id = id.Replace(" ", "_");
        <input id="@id" type="checkbox" class="@_class" name=@name value="@value" @(elements.Contains(value) ? " checked=checked" : String.Empty) />
    }
    void InputTag(string name, string[] elements, string value)
    {
        InputTag(value, "submitOnclick", name, elements, value);
    }
    void getSubSpeciesGroupList(SpeciesGroups.SpeciesGroupItem parentSpecies, string name)
    {
        <div class="filter_@parentSpecies.SpeciesName">
            <ul class="@parentSpecies.SpeciesName-filters">
                    @foreach (var species in parentSpecies.SubGroup)
                {
                    <li class="checkbox">
                        <label for="@species.SpeciesName">
                            @{
                            InputTag("input_" + species.SpeciesName, $"{parentSpecies.SpeciesName}_input submitOnclick", name, Model.Parameters.SpeciesGroups, species.SpeciesName);
                            }
                            <span class="label_text">@species.SpeciesName</span>
                        </label>
                    </li>
                }
                </ul>
        </div>
    }

    void makeCheckBoxLi(string key, string value, string name, string[] model)
    {        
        string id= key.Replace(" ", "_");
        <li class="checkbox">
            <label for="@id">
                @{ InputTag(name, model, key);}
                <span class="label_text">@value</span>
            </label>
        </li>
    }

    void makeFilterElement(string buttontext, string filtername, string action, string id, string buttonname, string numbername)
    {
        InputTag(action, "collapse_checkbox", "IsCheck", Model.Parameters.IsCheck, filtername);
        <button name="@buttonname" class="list_header" id="@id" onclick="collapse('@action')" type="button">
                    @buttontext
                    <span class="filternumber">@GetActiveFilters(numbername, Model.Parameters)</span>
        </button>
    }

    void makeFilterGroup(string groupclassname, string name, string[] modelname, dynamic looplist, string buttontext, string filtername, string action, string id, string buttonname, string numbername)
    {
        <li class="filter_group">
            @{makeFilterElement(buttontext, filtername, action, id, buttonname, numbername);}
            <div class=@groupclassname>
                <ul>
                    @{
                        string key;
                        string value;
                        if (name == nameof(Model.Parameters.Area))
                        {
                            foreach (var el in looplist)
                            {
                                value = el.AreaShort;
                                key = el.Area;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == nameof(Model.Parameters.Habitats))
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Name;
                                key = el.ShortName;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == nameof(Model.Parameters.Category))
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Category;
                                key = el.Category;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == nameof(Model.Parameters.Regions) || name == nameof(Model.Parameters.WaterRegions))
                        {
                            foreach (var el in looplist)
                            {
                                value = el.RegionShortName;
                                key = el.RegionName;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == nameof(Model.Parameters.ProductionSpecies))
                        {
                            foreach (var el in looplist)
                            {
                                value = el.ShortName;
                                key = el.Name;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Value;
                                key = el.Key;

                                if (name == nameof(Model.Parameters.Criterias))
                                {
                                    key = el.Key + " - " + el.Value;
                                }
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                    }
                </ul>
            </div>
        </li>
    }

    void makeSuperChips(string name, string[] modelname, dynamic looplist)
    {
        foreach (var value in modelname)
        {
            for (int i = 0; i < looplist.Length; i++)
            {
                string buttonText = string.Empty;
                string filterValue = "input_" + value;

                switch (name)
                {
                    case (nameof(Model.Parameters.SpeciesGroups)):
                        SpeciesGroups.SpeciesGroupItem speciesGroup = looplist[i];
                        if (speciesGroup.SpeciesName == value)
                        {
                            buttonText = speciesGroup.SpeciesName;
                            break;
                        }
                        else if (speciesGroup.SubGroup != null)
                        {
                            for (int j = 0; j < speciesGroup.SubGroup.Length; j++)
                            {
                                SpeciesGroups.SpeciesGroupItem subSpeciesGroup = speciesGroup.SubGroup[j];
                                if (subSpeciesGroup.SpeciesName == value)
                                {
                                    buttonText = subSpeciesGroup.SpeciesName;
                                    break;
                                }
                            }
                        }
                        break;
                    case (nameof(Model.Parameters.ProductionSpecies)):
                        ProductionSpecies.ProductionSpeciesItem productionSpecies = looplist[i];
                        if (productionSpecies.ShortName == value)
                        {
                            buttonText = productionSpecies.Name;
                        }
                        break;
                    case (nameof(Model.Parameters.Category)):
                        Categories.CategoryItem category = looplist[i];
                        if (category.Category == value)
                        {
                            buttonText = category.TagLine;
                        }
                        break;
                    case (nameof(Model.Parameters.Habitats)):
                        Habitat.HabitatItem habitat = looplist[i];
                        if (habitat.ShortName == value)
                        {
                            buttonText = habitat.Name;
                        }
                        break;
                    case (nameof(Model.Parameters.Area)):
                        Areas.AreaItem area = looplist[i];
                        if (area.AreaShort == value)
                        {
                            buttonText = area.Area;
                        }
                        break;
                    case (nameof(Model.Parameters.Regions)):
                    case (nameof(Model.Parameters.WaterRegions)):
                        Regions.RegionItem region = looplist[i];
                        if (region.RegionShortName == value)
                        {
                            buttonText = region.RegionName;
                        }
                        break;

                    default:
                        return;
                }
                if (!string.IsNullOrEmpty(buttonText))
                {
                    makeChips(buttonText, filterValue);
                }
            }
        }

    }

    void makeChips(string buttontext, string filterValue)
    {
        <button class="chips generic" onclick="submitClickedElement('@filterValue')" type="submit">
            <span>@buttontext</span>
            <span class="x" >
                <span class="material-icons">close</span>Fjern
            </span>
        </button>
    }
}

<!--- # of hits in search and their corresponding filter-chips -->
<div class="empty_filters">
    <p class="hit_count_text">
        <span class="searchstring">
            @FormatNumeric(Model.Results.TotalItemCount.ToString()) treff
            @if (GetActiveSelectionCount(Model.Parameters) != 0
|| !string.IsNullOrEmpty(GetActiveSelection(Model.Parameters)))
            {
                <span>
                    @if (!string.IsNullOrEmpty(GetActiveSelection(Model.Parameters)))
                    {
                        string searchstring = " for " + '"' + @GetActiveSelection(Model.Parameters) + '"';
                        <span>@searchstring</span>
                        <button class="button tinybutton tertiary search_related" name="remove_search" value="true">
                            <span class="material-icons">close</span>Fjern søk
                        </button>
                    }
                </span>
                <span class="filterbox">
                    @if (GetActiveSelectionCount(Model.Parameters) > 0)
                    {
                        var allFilterElements = GetActiveSelectionElement(Model.Parameters);
                        makeSuperChips(nameof(Model.Parameters.Area), allFilterElements, AllAreas);
                        makeSuperChips(nameof(Model.Parameters.Category), Model.Parameters.Category, AllCategories);
                        makeSuperChips(nameof(Model.Parameters.ProductionSpecies), Model.Parameters.ProductionSpecies, AllProductionSpecies);
                        makeSuperChips(nameof(Model.Parameters.SpeciesGroups), Model.Parameters.SpeciesGroups, AllSpeciesGroups);
                        makeSuperChips(nameof(Model.Parameters.TaxonRank), Model.Parameters.TaxonRank, AllTaxonRanks);
                        makeSuperChips(nameof(Model.Parameters.Habitats), Model.Parameters.Habitats, AllHabitats);
                        makeSuperChips(nameof(Model.Parameters.Regions), Model.Parameters.Regions, AllRegions);
                        makeSuperChips(nameof(Model.Parameters.WaterRegions), Model.Parameters.WaterRegions, AllWaterRegions);
                        //makeSuperChips("Criterias", Model.Parameters.Criterias, AllCriterias);
                    }

                    @{string buttontext = @GetActiveSelectionCount(Model.Parameters) + " filter"; }
                    @if(GetActiveSelectionCount(Model.Parameters) > 1)
                    {
                        buttontext.Replace("filter", "filtre");
                        <button class="button tinybutton tertiary search_related" name="Parameters.@nameof(Model.Parameters.RemoveFilters)" value="true">
                            <span class="material-icons">close</span>Fjern alle filter
                        </button>
                    }        
                </span>
            }
        </span>
    </p>

</div>

<!-- CONTROL BUTTONS and toggles-->
<div class="controls">
    <div class="list_control_buttons">
        <button class="toggle_filter only_mobile list_actions no_js" id="open_filter" value="open_filters" name="Åpne filter" type="button" onclick="openFilters()">
            @if (GetActiveSelectionCount(Model.Parameters) != 0)
            {
                <span class="filternumber">@GetActiveSelectionCount(Model.Parameters)</span>
            }
            <span class="material-icons">filter_list</span>Filter
        </button>

        @if (Model.Parameters.View != "stat")
        {
            <select asp-for="Parameters.SortBy" id="sort_results" class="sort_by list_actions" onchange="this.form.submit()">
                <option value="@nameof(AlienSpeciesAssessment2023.ScientificName)">Artsnavn</option>
                <option value="@nameof(AlienSpeciesAssessment2023.EvaluatedVernacularName)">Populærnavn</option>
                <option value="@nameof(AlienSpeciesAssessment2023.Category)">Kategori</option>
            </select>
        }
    </div>
    <partial name="/Views/Shared/_ControlButtons.cshtml" model="controlButtonsViewModel" />
</div>

<div class="listwrapper">
    <div class="filtercontainer">
        @{ InputTag("initial_check", "meta_checkbox", "Meta", Model.Parameters.Meta, "Visited");}
        @{ InputTag("remember_scroll", "meta_checkbox", "Meta", Model.Parameters.Meta, "0");}
        <!-- View controls -->
        <div id="filters" class="filteX no_js hide_on_smallscreen">
            <div id="filter_modal_background">
                <div id="filters_scrollable" class="filter_background">
                    <div class="filter_groups">
                        <partial name="/Views/Shared/_FilterHeader.cshtml" />
                        <div class="filter_scroll_area">
                            <ul>
                                @{
                                    makeFilterGroup("filter_area", nameof(Model.Parameters.Area), Model.Parameters.Area, AllAreas, @SearchAndFilter.SearchChooseArea, "Area", "show_area", "list_header_area", "områdefiltre", "Area");
                                }

                                <li class="filter_group">
                                    @{makeFilterElement(@SearchAndFilter.SearchChooseCategory, "Category", "show_category", "list_header_category", "kategorifiltre", "Category");}
                                    <div class="filter_category">
                                        <ul>
                                            @foreach (var category in AllCategories)
                                            {
                                                <li class="checkbox" style="margin-top: 0;">
                                                    <label for="input_@category.Category">
                                                        @{
                                                            InputTag("input_" + category.Category, "submitOnclick", nameof(Model.Parameters.Category), Model.Parameters.Category, category.Category);
                                                        }
                                                        <span class="label_text">@category.Category - @category.PresentationString</span>
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </li>
                                @{
                                    makeFilterGroup("filter_taxon_rank", nameof(Model.Parameters.TaxonRank), Model.Parameters.TaxonRank, AllTaxonRanks, @SearchAndFilter.SearchFilterTaxonRank, nameof(Model.Parameters.TaxonRank), "show_taxon_rank", "list_header_taxon_rank", "'taksonomisk nivå'-filtre", nameof(Model.Parameters.TaxonRank));
                                    makeFilterGroup("filter_production_species", nameof(Model.Parameters.ProductionSpecies), Model.Parameters.ProductionSpecies, AllProductionSpecies, @SearchAndFilter.ProductionSpecies, nameof(Model.Parameters.ProductionSpecies), "show_production_species", "list_header_production_species", "'produksjonsart'-filtre", nameof(Model.Parameters.ProductionSpecies));
                                }

                                <li class="filter_group">
                                    @{makeFilterElement("Artsgruppe", "SpeciesGroups", "show_species_groups", "list_header_species_groups", "artsgruppefiltre", "SpeciesGroups");}
                                    <div class="filter_species_groups">
                                        <ul>
                                            @foreach (var species in AllSpeciesGroups)
                                            {
                                                @if (species.SubGroup != null)
                                                {
                                                    InputTag($"show_{species.SpeciesName}", "collapse_checkbox", "IsCheck", Model.Parameters.IsCheck, species.SpeciesName);
                                                    <li class="checkbox">
                                                        <button name="@species.SpeciesName-filter" class="list_header" id="list_header_@species.SpeciesName" onclick="collapse('show_@species.SpeciesName')" type="button">
                                                            <span>@species.SpeciesName</span>
                                                            <span class="list_header_text">
                                                                <span class="filternumber">@GetActiveFilters(species.SpeciesName, Model.Parameters)</span>
                                                            </span>
                                                            <span id="show_all_@species.SpeciesName">Marker alle</span>
                                                            <label onclick="event.stopPropagation()">
                                                                @{
                                                                    InputTag("SpeciesGroups", Model.Parameters.SpeciesGroups, species.SpeciesName);
                                                                }
                                                            </label>
                                                        </button>
                                                    </li>
                                                    getSubSpeciesGroupList(species, "SpeciesGroups");
                                                }
                                                else
                                                {
                                                    makeCheckBoxLi(@species.SpeciesName, @species.SpeciesName, "SpeciesGroups", Model.Parameters.SpeciesGroups);
                                                }
                                            }
                                        </ul>
                                    </div>
                                </li>
                                @{
                                    makeFilterGroup("filter_habitat", nameof(Model.Parameters.Habitats), Model.Parameters.Habitats, AllHabitats, "Hovedhabitat", "Habitat", "show_habitat", "list_header_habitat", "hovedhabitatfiltre", "Habitats");
                                    makeFilterGroup("filter_region", nameof(Model.Parameters.Regions), Model.Parameters.Regions, AllRegions, "Regioner og havområder", "Region", "show_region", "list_header_region", "regionfiltre", "Regions");
                                    makeFilterGroup("filter_water_region", nameof(Model.Parameters.WaterRegions), Model.Parameters.WaterRegions, AllWaterRegions, "Vannregioner", "WaterRegion", "show_water_region", "list_header_water_region", "vannregionfiltre", "WaterRegions");
                                    //makeFilterGroup("filter_criteria", nameof(Model.Parameters.Criterias), Model.Parameters.Criterias, AllCriterias, @SearchAndFilter.SearchChooseCriteria, "Criteria", "show_criteria", "list_header_criteria", "kriteriefiltre", "Criterias");
                                }
                            </ul>
                        </div>
                        <partial name="/Views/Shared/_FilterMobileButtons.cshtml" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <partial name="/Views/AlienSpecies/2023/ListPartials/_View.cshtml" />
</div>
