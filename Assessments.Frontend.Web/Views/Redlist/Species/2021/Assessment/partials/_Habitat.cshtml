@model SpeciesAssessment2021
@*
    Habitat was re-made completely for launch 2021.
    Existing inline text is re-used from innsynet 2021, which
    has been moved to the json resource file for this partial.

    TODO: Mobile-friendly version.
*@

@{
//model IEnumerable<string>
Dictionary<string, Dictionary<string, string>> habitat = ViewBag.habitat.ToObject<Dictionary<string, Dictionary<string, string>>>();


    void habitatFunction(string imageurl, string title, string description, string mapping, string active)
    {
    <div class="habitat_element @active">
        <div class="habitat_icon">
            @if (imageurl != null)
            {
                <img src=@imageurl />
            }
        </div>
        @if (title != null)
        {
            <b>@title</b>
        }
        @if (description != null)
        {
            <p class="expand_hide">
                @description

            </p>
        }
        @if (mapping != null)
        {

            <p class="expand_hide">
                @Html.Raw(mapping)
            </p>

            <button class="tertiary tinybutton" onclick="expandHabitat(this, 'expanded')">
                <span class="more">
                    Se mer 
                    <span class="material-icons">arrow_drop_down</span>
                </span>
                <span class="less">
                    Se mindre
                    <span class="material-icons">arrow_drop_up</span>
                </span>
            </button>
        }
    </div>    
    }
}

<div class="habitat page_section ">
    @if (@Model.MainHabitat.Count() != 0)
    {
        <h2>@ViewBag.glossary["habitat"]["tagline"]</h2>
        <p>@Html.Raw(@ViewBag.glossary["habitat"]["description"])</p>

        <button class="changetab active" onclick="expandHabitat(this, 'see_all', 'remove')">
            Hovedhabitat
        </button>

        <button class="changetab" onclick="expandHabitat(this, 'see_all','add')">
            Alle habitat
        </button>

        <div class="habitat_container tabbed_element_container">
            @foreach (var key in habitat.Keys)
            {
                var imageurl = @habitat[key]["image"];
                var title = @habitat[key]["shortname"];
                var description = @habitat[key]["description"];
                var mapping = @habitat[key]["mapping"];
                var active = @Model.MainHabitat.Contains(key) ? "active" : "inactive";
                habitatFunction(imageurl, title, description, mapping, active);
            }
        </div>
    }

    <script>
        // See more text by altering css of the clicked element's top parent node
        var seemorebuttons = document.getElementsByClassName('seemore');

        function expandHabitat(element, className, actiontype) {
            if (actiontype == "remove") {
                element.parentElement.classList.remove(className);
                element.nextElementSibling.classList.remove("active");
                element.classList.add("active");
            } else if (actiontype == "add") {
                element.parentElement.classList.add(className);
                element.previousElementSibling.classList.remove("active");
                element.classList.add("active");
            } else {               
                if (element.parentElement.classList.contains(className)) {
                    element.parentElement.classList.remove(className);
                } else {
                    element.parentElement.classList.add(className);
                }                
            }
            
        }
    </script>
</div>