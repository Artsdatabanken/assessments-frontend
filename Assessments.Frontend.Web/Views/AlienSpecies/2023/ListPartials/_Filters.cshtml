@model AlienSpeciesListViewModel;
@using System.Linq;

@{
    var AllAreas = Areas.AlienSpecies2023Areas;
    var AllCategories = Categories.AlienSpecies2023Categories;
    var AllCategoriesChanged = CategoryChange.AlienSpecies2023CategoryChanged;
    var AllDeciciveCriterias = DeciciveCriteria.AlienSpecies2023DeciciveCriteria;
    var AllSpeciesStatus = SpeciesStatus.AlienSpecies2023SpeciesStatus;
    var AllHabitats = Habitat.AlienSpecies2023Habitats;
    var AllProductionSpecies = ProductionSpecies.AlienSpecies2023ProductionSpecies;
    var AllRegions = Regions.AlienSpecies2023Regions;
    var AllSpeciesGroups = SpeciesGroups.AlienSpecies2023SpeciesGroups;
    var AllTaxonRanks = TaxonRank.AlienSpecies2023TaxonRanks;
    var AllWaterRegions = Regions.AlienSpecies2023WaterRegions;

    ControlButtonsViewModel controlButtonsViewModel = new ControlButtonsViewModel
    {
        View = Model.View,
        ItemCount = Model.Results.TotalItemCount,
    };
}

@functions{
    void InputTag(string id, string className, string name, string[] elements, string value)
    {
        if (id == "remember_scroll")
        {
            foreach (var item in elements)
                if (item.Contains("scroll_"))
                    value = item.Replace("scroll_", "");
        }
        id = id.Replace(" ", "_");
        <input id="@id" type="checkbox" class="@className" name=@name value="@value" @(elements.Contains(value) ? " checked=checked" : String.Empty) />
    }

    void InputTag(string name, string[] elements, string value)
    {
        InputTag(value, "submitOnclick", name, elements, value);
    }

    void MakeCheckBoxLi(string value, string label, string name, string[] model, string labelClassName, string inputClassName)
    {        
        string id = value.Replace(" ", "_");
        <li class="checkbox">
            <label for="@id" class="@labelClassName">
                @{
                    InputTag(value, $"{inputClassName} submitOnclick", name, model, value);
                }
                <span class="label_text">@label</span>
            </label>
        </li>
    }

    void MakeFilterElement(string buttonText, string filterName, string buttonname)
    {
        string action = $"show_{filterName.ToLower()}";
        string id = $"list_header_{filterName.ToLower()}";

        InputTag(action, "collapse_checkbox", "IsCheck", Model.IsCheck, filterName);
        <button name="@buttonname" class="list_header" id="@id" onclick="collapse('@action')" type="button">
                    @buttonText
            <span class="filternumber">@GetActiveFilters(filterName, Model)</span>
        </button>
    }

    void MakeFilterGroup(string filterName, string modelName, bool isSubGroup, string[] filterModel, Filter.FilterItem[] filterItems, string buttonText, string buttonName, string outerClassName)
    {
        string className = isSubGroup ? $"filter_subgroup filter_{filterName.ToLower()}" : $"filter_{filterName.ToLower()}";

        <li class="filter_group">
            @{
                MakeFilterElement(buttonText, filterName, buttonName);
            }
            <div class=@className>
                <ul>
                    @{
                        string label;
                        string value;
                        string markAllClassName = "mark_all";
                        if (filterItems.Length > 4 && modelName != nameof(Model.SpeciesStatus))
                            MakeCheckBoxLi(filterName, "Merk alle", modelName, filterModel, markAllClassName, outerClassName);

                        foreach (var el in filterItems)
                        {
                            value = el.NameShort;
                            label = filterName == nameof(Model.Category) ? $"{el.NameShort} - {el.Description}" : el.Name;
                            string extraOuterClassName = $"{outerClassName} {filterName}_input";
                            if (el.SubGroup != null)
                            {
                                MakeFilterGroup(el.NameShort, modelName, true, filterModel, el.SubGroup, el.Name, $"{el.Name}filtre", extraOuterClassName);
                            }
                            else
                            {
                                MakeCheckBoxLi(value, label, modelName, filterModel, string.Empty, extraOuterClassName);
                            }
                        }
                    }
                </ul>
            </div>
        </li>
    }

    void MakeFilterGroup(string filterName, string[] filterModel, Filter.FilterItem[] filterItems, string buttonText, string buttonName)
    {
        MakeFilterGroup(filterName, filterName, false, filterModel, filterItems, buttonText, buttonName, string.Empty);
    }

    void RenderChip(string buttontext, string filterValue)
    {
        <button class="chips generic" onclick="submitClickedElement('@filterValue')" type="submit">
            <span>@buttontext</span>
            <span class="x" >
                <span class="material-icons">close</span>Fjern
            </span>
        </button>
    }

    void MakeFilterChips(string[] filterModel, Filter.FilterItem[] filterItems)
    {
        foreach (var filter in filterModel)
        {
            string buttonText = GetChipText(filter, filterItems);
            if (!string.IsNullOrEmpty(buttonText))
                RenderChip(buttonText, filter);
        }

    }
}

<!--- # of hits in search and their corresponding filter-chips -->
<div class="empty_filters">
    <p class="hit_count_text">
        <span class="searchstring">
            @FormatNumeric(Model.Results.TotalItemCount.ToString()) treff
            @if (GetActiveSelectionCount(Model) != 0
|| !string.IsNullOrEmpty(GetActiveSelection(Model)))
            {
                <span>
                    @if (!string.IsNullOrEmpty(GetActiveSelection(Model)))
                    {
                        string searchstring = " for " + '"' + @GetActiveSelection(Model) + '"';
                        <span>@searchstring</span>
                        <a href="@Context.Request.QueryString.RemoveParameters(new[] { nameof(AlienSpeciesListParameters.Name) })" class="button tinybutton tertiary search_related">
                            <span class="material-icons">close</span>Fjern søk
                        </a>
                    }
                </span>
                <span class="filterbox">
                    @if (GetActiveSelectionCount(Model) > 0)
                    {
                        MakeFilterChips(Model.Area, AllAreas);
                        MakeFilterChips(Model.Category, AllCategories);
                        MakeFilterChips(Model.CategoryChanged, AllCategoriesChanged);
                        MakeFilterChips(Model.DecisiveCriterias, AllDeciciveCriterias);
                        MakeFilterChips(Model.SpeciesStatus, AllSpeciesStatus);
                        MakeFilterChips(Model.ProductionSpecies, AllProductionSpecies);
                        MakeFilterChips(Model.SpeciesGroups, AllSpeciesGroups);
                        MakeFilterChips(Model.TaxonRank, AllTaxonRanks);
                        MakeFilterChips(Model.Habitats, AllHabitats);
                        MakeFilterChips(Model.Regions, AllRegions);
                        MakeFilterChips(Model.WaterRegions, AllWaterRegions);
                    }

                    <a is-visible="@GetActiveSelectionCount(Model) > 1" href="@Context.Request.QueryString.RemoveParameters(Model.FilterParameters)" class="button tinybutton tertiary search_related">
                        <span class="material-icons">close</span>Fjern alle filter
                    </a>
                </span>
            }
        </span>
    </p>
</div>

<!-- CONTROL BUTTONS and toggles-->
<div class="controls">
    <div class="list_control_buttons">
        <button class="toggle_filter only_mobile list_actions no_js" id="open_filter" value="open_filters" name="Åpne filter" type="button" onclick="openFilters()">
            @if (GetActiveSelectionCount(Model) != 0)
            {
                <span class="filternumber">@GetActiveSelectionCount(Model)</span>
            }
            <span class="material-icons">filter_list</span>Filter
        </button>

        @if (Model.View != "stat")
        {
            <select asp-for="SortBy" id="sort_results" class="sort_by list_actions" onchange="this.form.submit()">
                <option value="@nameof(AlienSpeciesAssessment2023.ScientificName)">Artsnavn</option>
                <option value="@nameof(AlienSpeciesAssessment2023.VernacularName)">Populærnavn</option>
                <option value="@nameof(AlienSpeciesAssessment2023.Category)">Kategori</option>
            </select>
        }
    </div>
    <partial name="/Views/Shared/_ControlButtons.cshtml" model="controlButtonsViewModel" />
</div>

<div class="listwrapper">
    <div class="filtercontainer">
        @{ InputTag("initial_check", "meta_checkbox", "Meta", Model.Meta, "Visited");}
        @{ InputTag("remember_scroll", "meta_checkbox", "Meta", Model.Meta, "0");}
        <!-- View controls -->
        <div id="filters" class="filteX no_js hide_on_smallscreen">
            <div id="filter_modal_background">
                <div id="filters_scrollable" class="filter_background">
                    <div class="filter_groups">
                        <partial name="/Views/Shared/_FilterHeader.cshtml" />
                        <div class="filter_scroll_area">
                            <ul>
                                @{
                                    MakeFilterGroup(nameof(Model.Area), Model.Area, AllAreas, SearchAndFilterNames.AssessmentArea, "områdefiltre");
                                    MakeFilterGroup(nameof(Model.Category), Model.Category, AllCategories, SearchAndFilterNames.Category, "kategorifiltre");
                                    MakeFilterGroup(nameof(Model.TaxonRank), Model.TaxonRank, AllTaxonRanks, SearchAndFilterNames.TaxonRank, "'taksonomisk nivå'-filtre");
                                    MakeFilterGroup(nameof(Model.DecisiveCriterias), Model.DecisiveCriterias, AllDeciciveCriterias, SearchAndFilterNames.DecisiveCriteria, "avgjorende kriterier-filtre");
                                    MakeFilterGroup(nameof(Model.SpeciesStatus), Model.SpeciesStatus, AllSpeciesStatus, SearchAndFilterNames.EstablishmentCategory, "etableringsklassefiltre");
                                    MakeFilterGroup(nameof(Model.CategoryChanged), Model.CategoryChanged, AllCategoriesChanged, SearchAndFilterNames.CategoryChanged, "kategoriendringsfiltre");
                                    MakeFilterGroup(nameof(Model.ProductionSpecies), Model.ProductionSpecies, AllProductionSpecies, SearchAndFilterNames.ProductionSpecies, "'produksjonsart'-filtre");
                                    MakeFilterGroup(nameof(Model.SpeciesGroups), Model.SpeciesGroups, AllSpeciesGroups, SearchAndFilterNames.SpeciesGroup, "artsgruppefiltre");
                                    MakeFilterGroup(nameof(Model.Habitats), Model.Habitats, AllHabitats, "Hovedhabitat", "hovedhabitatfiltre");
                                    MakeFilterGroup(nameof(Model.Regions), Model.Regions, AllRegions, "Regioner og havområder", "regionfiltre");
                                    MakeFilterGroup(nameof(Model.WaterRegions), Model.WaterRegions, AllWaterRegions, "Vannregioner", "vannregionfiltre");
                                }
                            </ul>
                        </div>
                        <partial name="/Views/Shared/_FilterMobileButtons.cshtml" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <partial name="/Views/AlienSpecies/2023/ListPartials/_View.cshtml" />
</div>
