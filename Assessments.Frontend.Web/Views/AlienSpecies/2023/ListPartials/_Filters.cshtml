@model AlienSpeciesListViewModel;
@using static Assessments.Frontend.Web.Infrastructure.Constants;
@using static Assessments.Frontend.Web.Infrastructure.Helpers;
@using static Assessments.Frontend.Web.Infrastructure.AlienSpecies.FilterHelpers;
@using System.Linq;

@{
    Areas.AreaItem[] AllAreas = Areas.AlienSpecies2023Areas;
    Categories.CategoryItem[] AllCategories = Categories.AlienSpecies2023Categories;
    //var AllCriterias = ViewBag.AllCriterias;
    Regoins.RegionItem[] AllRegions = Regoins.AlienSpecies2023Regions;
    Regoins.RegionItem[] AllWaterRegions = Regoins.AlienSpecies2023WaterRegions;
    Habitat.HabitatItem[] AllHabitats = Habitat.AlienSpecies2023Habitats;
    Dictionary<string, string> AllTaxonRanks = getAllTaxonRanks();
    SpeciesGroups.SpeciesGroupItem[] AllSpeciesGroups = SpeciesGroups.AlienSpecies2023SpeciesGroups;

    ControlButtonsViewModel controlButtonsViewModel = new ControlButtonsViewModel
    {
        View = Model.Parameters.View,
        ItemCount = Model.Results.TotalItemCount,
    };
}

@functions{
    void InputTag(string id, string _class, string name, string[] elements, string value)
    {
        if (id == "remember_scroll")
        {
            foreach (var item in elements)
                if (item.Contains("scroll_"))
                    value = item.Replace("scroll_", "");
        }
        id = id.Replace(" ", "_");
        <input id="@id" type="checkbox" class="@_class" name=@name value="@value" @(elements.Contains(value) ? " checked=checked" : String.Empty) />
    }
    void InputTag(string name, string[] elements, string value)
    {
        InputTag(value, "submitOnclick", name, elements, value);
    }
    void getInsectsList(string[] insects)
    {
        <div class="filter_insects">
            <ul class="insect_filters">
                @foreach (var insect in insects)
                {
                    <li class="checkbox">
                        <label for="@insect">
                            @{
                                InputTag(insect, "insect_input submitOnclick", "SpeciesGroups", Model.Parameters.SpeciesGroups, insect);
                            }
                            <span class="label_text">@insect</span>
                        </label>
                    </li>
                }
            </ul>
        </div>
                                }
    void makeCheckBoxLi(string key, string value, string name, string[] model)
    {        
        string id= key.Replace(" ", "_");
        <li class="checkbox">
            <label for="@id">
                @{ InputTag(name, model, key);}
                <span class="label_text">@value</span>
            </label>
        </li>
    }
    void makeFilterElement(string buttontext, string filtername, string action, string id, string buttonname, string numbername)
    {
        InputTag(action, "collapse_checkbox", "IsCheck", Model.Parameters.IsCheck, filtername);
        <button name="@buttonname" class="list_header" id="@id" onclick="collapse('@action')" type="button">
            @buttontext
            <span class="filternumber">@GetActiveFilters(numbername, Model.Parameters)</span>
        </button>
    }
    void makeFilterGroup(bool swap, string groupclassname, string name, dynamic modelname, dynamic looplist, string buttontext, string filtername, string action, string id, string buttonname, string numbername)
    {
        <li class="filter_group">
            @{makeFilterElement(buttontext, filtername, action, id, buttonname, numbername);}
            <div class=@groupclassname>
                <ul>
                    @{
                        string key;
                        string value;
                        if (name == "Area")
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Area;
                                key = el.AreaShort;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == "Habitats")
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Name;
                                key = el.ShortName;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == "Category")
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Category;
                                key = el.Category;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else if (name == "Regions" || name == "WaterRegions")
                        {
                            foreach (var el in looplist)
                            {
                                value = el.RegionName;
                                key = el.RegionShortName;
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                        else
                        {
                            foreach (var el in looplist)
                            {
                                value = el.Value;
                                key = el.Key;

                                if (name == "Criterias")
                                {
                                    key = el.Key + " - " + el.Value;
                                }
                                makeCheckBoxLi(value, key, name, modelname);
                            }
                        }
                    }
                    
                </ul>
            </div>
        </li>
    }
    void makeSuperChips(bool swap, string name, dynamic modelname, dynamic looplist)
    {
        @foreach (var el in looplist)
        {
            dynamic value = el;
            dynamic key = el;
            string labelName;

            if (name == "Category")
            {
                value = el.Category;
                labelName = "input_" + value;
                key = el.PresentationString;

            }
            else if (name == "Habitats")
            {
                value = el.ShortName;
                labelName = "input_" + value;
                key = el.Name;
            }
            else if (name == "Area")
            {
                value = el.AreaShort;
                labelName = "input_" + value;
                key = el.Area;
            }
            else if (name == "Regions" || name == "WaterRegions")
            {
                value = el.RegionShortName;
                labelName = "input_" + value;
                key = el.RegionName;
            }
            else
            {
                if (name != "SpeciesGroups")
                {
                    if (swap)
                    {
                        value = el.Key;
                        key = el.Value;
                    }
                    else
                    {
                        value = el.Value;
                        key = el.Key;
                    }
                }
                labelName = value;
                if (name == "Criterias")
                {
                    key = el.Key + " - " + el.Value;
                }
                else if (name == "Habitats")
                {
                    key = key["shortname"];
                }
            }

            @foreach (string element in modelname)
            {
                if (element == value)
                {
                    makeChips(key, "generic", labelName);
                }
            }
        }
    }
    void makeChips(string buttontext, string className,string value)
    {
    <button class="chips @className" onclick="submitClickedElement('@value')" type="submit" >
        <span>@buttontext</span>       
        <span class="x" >
            <span class="material-icons">close</span>Fjern
        </span>
    </button>
    }
}

<!--- # of hits in search and their corresponding filter-chips -->
<div class="empty_filters">
    <p class="hit_count_text">
        <span class="searchstring">
            @FormatNumeric(Model.Results.TotalItemCount.ToString()) treff
            @if (GetActiveSelectionCount(Model.Parameters) != 0
|| !string.IsNullOrEmpty(GetActiveSelection(Model.Parameters)))
            {
                <span>
                    @if (!string.IsNullOrEmpty(GetActiveSelection(Model.Parameters)))
                    {
                        string searchstring = " for " + '"' + @GetActiveSelection(Model.Parameters) + '"';
                        <span>@searchstring</span>
                        <button class="button tinybutton tertiary search_related" name="remove_search" value="true">
                            <span class="material-icons">close</span>Fjern s√∏k
                        </button>
                    }
                </span>
                <span class="filterbox">
                    @if (GetActiveSelectionCount(Model.Parameters) > 0)
                    {
                        var allFilterElements = GetActiveSelectionElement(Model.Parameters);
                        makeSuperChips(false, "Area", allFilterElements, AllAreas);
                        makeSuperChips(true, "Category", Model.Parameters.Category, AllCategories);
                        makeSuperChips(false, "SpeciesGroups", Model.Parameters.SpeciesGroups, AllSpeciesGroups);
                        //makeSuperChips(false, "SpeciesGroups", Model.Parameters.SpeciesGroups, AllInsects);
                        makeSuperChips(true, "TaxonRank", Model.Parameters.TaxonRank, AllTaxonRanks);
                        makeSuperChips(true, "Habitats", Model.Parameters.Habitats, AllHabitats);
                        makeSuperChips(true, "Regions", Model.Parameters.Regions, AllRegions);
                        makeSuperChips(true, "WaterRegions", Model.Parameters.WaterRegions, AllWaterRegions);
                        //makeSuperChips(true, "Criterias", Model.Parameters.Criterias, AllCriterias);
                    }

                    @{string buttontext = @GetActiveSelectionCount(Model.Parameters) + " filter"; }
                    @if(GetActiveSelectionCount(Model.Parameters) > 1)
                    {
                        buttontext.Replace("filter", "filtre");
                        <button class="button tinybutton tertiary search_related" name="remove_filters" value="true">
                            <span class="material-icons">close</span>Fjern alle filter
                        </button>
                    }        
                </span>
            }
        </span>
    </p>

</div>

<!-- CONTROL BUTTONS and toggles-->
<div class="controls">
    <div class="list_control_buttons">
        <button class="toggle_filter only_mobile list_actions no_js" id="open_filter" value="open_filters" name="√Öpne filter" type="button" onclick="openFilters()">
            @if (GetActiveSelectionCount(Model.Parameters) != 0)
            {
                <span class="filternumber">@GetActiveSelectionCount(Model.Parameters)</span>
            }
            <span class="material-icons">filter_list</span>Filter
        </button>

        @if (Model.Parameters.View != "stat")
        {
            <select asp-for="Parameters.SortBy" id="sort_results" class="sort_by list_actions" onchange="this.form.submit()">
                <option value="@nameof(SpeciesAssessment2021.ScientificName)">Artsnavn</option>
                <option value="@nameof(SpeciesAssessment2021.PopularName)">Popul√¶rnavn</option>
                <option value="@nameof(SpeciesAssessment2021.Category)">Kategori</option>
                <option value="@nameof(SpeciesAssessment2021.SpeciesGroup)">Artsgruppe</option>
            </select>
        }
    </div>
    <partial name="/Views/Shared/_ControlButtons.cshtml" model="controlButtonsViewModel" />
</div>

<div class="listwrapper">
    <div class="filtercontainer">
        @{ InputTag("initial_check", "meta_checkbox", "Meta", Model.Parameters.Meta, "Visited");}
        @{ InputTag("remember_scroll", "meta_checkbox", "Meta", Model.Parameters.Meta, "0");}
        <!-- View controls -->
        <div id="filters" class="filteX no_js hide_on_smallscreen">
            <div id="filter_modal_background">
                <div id="filters_scrollable" class="filter_background">
                    <div class="filter_groups">
                        <partial name="/Views/Shared/_FilterHeader.cshtml" />
                        <div class="filter_scroll_area">
                            <ul>
                                @{makeFilterGroup(false, "filter_area", "Area", Model.Parameters.Area, AllAreas, @SearchAndFilter.SearchChooseArea, "Area", "show_area", "list_header_area", "omr√•defiltre", "Area");}

                                <li class="filter_group">
                                    @{makeFilterElement(@SearchAndFilter.SearchChooseCategory, "Category", "show_category", "list_header_category", "kategorifiltre", "Category");}
                                    <div class="filter_category">
                                        <ul>
                                            @foreach (var category in AllCategories)
                                            {
                                                <li class="checkbox" style="margin-top: 0;">
                                                    <label for="input_@category.Category">
                                                        @{
                                                            InputTag("input_" + category.Category, "submitOnclick", "Category", Model.Parameters.Category, category.Category);
                                                        }
                                                        <span class="label_text">@category.Category - @category.PresentationString</span>
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </li>
                                @{makeFilterGroup(true, "filter_taxon_rank", "TaxonRank", Model.Parameters.TaxonRank, AllTaxonRanks, @SearchAndFilter.SearchFilterTaxonRank, "TaxonRank", "show_taxon_rank", "list_header_taxon_rank", "'taksonomisk niv√•'-filtre", "TaxonRank");}

                                <li class="filter_group">
                                    @{makeFilterElement("Artsgruppe", "SpeciesGroups", "show_species_groups", "list_header_species_groups", "artsgruppefiltre", "SpeciesGroups");}
                                    <div class="filter_species_groups">
                                        <ul>
                                            @foreach (var species in AllSpeciesGroups)
                                            {
                                                @if (species.SpeciesName == "Insekter")
                                                {
                                                    InputTag("show_insects", "collapse_checkbox", "IsCheck", Model.Parameters.IsCheck, "Insects");
                                                    <li class="checkbox">
                                                        <button name="insektsfiltre" class="list_header" id="list_header_insects" onclick="collapse('show_insects')" type="button">
                                                            <span>@species</span>
                                                            <span class="list_header_text">
                                                                <span class="filternumber">@GetActiveFilters("Insects", Model.Parameters)</span>
                                                            </span>
                                                            <span id="show_all_insects">Marker alle</span>
                                                            <label onclick="event.stopPropagation()">
                                                                @{ InputTag("SpeciesGroups", Model.Parameters.SpeciesGroups, species.SpeciesName); }
                                                            </label>
                                                        </button>
                                                    </li>
                                                    //getInsectsList(AllInsects);
                                                }
                                                else
                                                {
                                                    makeCheckBoxLi(@species.SpeciesName, @species.SpeciesName, "SpeciesGroups", Model.Parameters.SpeciesGroups);
                                                }
                                            }
                                        </ul>
                                    </div>
                                </li>
                                @{
                                    //makeFilterGroup(true, "filter_habitat", "Habitats", Model.Parameters.Habitats, AllHabitats, "Hovedhabitat", "Habitat", "show_habitat", "list_header_habitat", "hovedhabitatfiltre", "Habitats");
                                    //makeFilterGroup(true, "filter_region", "Regions", Model.Parameters.Regions, AllRegions, "Regioner og havomr√•der", "Region", "show_region", "list_header_region", "regionfiltre", "Regions");
                                    //makeFilterGroup(true, "filter_water_region", "WaterRegions", Model.Parameters.WaterRegions, AllWaterRegions, "Vannregioner", "WaterRegion", "show_water_region", "list_header_water_region", "vannregionfiltre", "WaterRegions");
                                    //makeFilterGroup(true, "filter_criteria", "Criterias", Model.Parameters.Criterias, AllCriterias, @SearchAndFilter.SearchChooseCriteria, "Criteria", "show_criteria", "list_header_criteria", "kriteriefiltre", "Criterias");
                                }
                            </ul>
                        </div>
                        <partial name="/Views/Shared/_FilterMobileButtons.cshtml" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <partial name="/Views/AlienSpecies/2023/ListPartials/_View.cshtml" />
</div>
