
@model SpeciesAssessment2021

@functions {

    private SpeciesAssessment2021MinMaxProbableIntervall GetQuantileForCriteria(string key)
    {
        switch (key)
        {
            case "A1":
                return Model.A1.QuantifiedReduction;
            case "A2":
                return Model.A2.QuantifiedReduction;
            case "A3":
                return Model.A3.QuantifiedReduction;
            case "A4":
                return Model.A4.QuantifiedReduction;
            case "B1":
                return Model.B1.Statistics;
            case "B2":
                return Model.B2.Statistics;
            case "BAii":
                return Model.BAii.Statistics;
            case "C":
                return Model.C.Statistics;
            case "C1":
                return Model.C1.Statistics;
            case "C2Ai":
                return Model.C2Ai.Statistics;
        }
        return null;
    }

}

@*
    TODO: IMPROVE AND MOVE LOGIC FROM VIEW. NOT CRITICAL, WILL NOT PRIORITIZE.

    This component takes in the json file of criteria and displays it
    It also takes in the unhandled criteriasummarized string and trasforms it
    into two useable dictionaries which are then matched to relevant places in the json.
*@

@{
    // Cast JSON to dictionary for easy iteration.
    Dictionary<string, Dictionary<string, object>> criteria = ViewBag.kriterier.ToObject<Dictionary<string, Dictionary<string, object>>>();


    // Each criteria by letter is handled differently.
    string a = "", b = "", c = "", d = "";

    void placeCriteria(string criteria)
    {

        if (criteria.Contains("A"))
        {
            a = criteria;
        }
        else if (criteria.Contains("B"))
        {
            b = criteria;
        }
        else if (criteria.Contains("C"))
        {
            c = criteria;
        }
        else if (criteria.Contains("D"))
        {
            d = criteria;
        }

    }

    // Iterate the criteria string and place each separate criteria in its correct container.
    if (@Model.CriteriaSummarized.Contains(";"))
    {
        // SPLIT THE LIST AND LOOP THEM
        foreach (string crit in @Model.CriteriaSummarized.Split(";"))
        {
            placeCriteria(crit);
        }
    }
    else
    {
        placeCriteria(@Model.CriteriaSummarized);
    }

    // STRING HANDLING
    // A CRITERIA:
    // OPTIONS AND SUBCRITERIA ARE NOT SEPARATE ENTITIES

    a = subCriteria("A", a);


    // B CRITERIA
    // OPTIONS AND SUBCRITERIA ARE SEPARATE ENTITIES
    // options may contain sub-options

    string b_subcriteria = "";
    string b_options = "";

    b = subCriteria("B", b);
    if (b.Contains("B1"))
    {
        b_subcriteria += "B1;";
        b = b.Replace("B1", "");
    }
    if (b.Contains("B2"))
    {
        b_subcriteria += "B2";
        b = b.Replace("B2", "");
    }

    b = b.Replace("b", ";b");
    b = b.Replace("c", ";c");
    var b_distinctlist = b.Split(";").Distinct();
    b_options = string.Join(";", b_distinctlist);
    b = b_subcriteria + ";" + b_options;

    // C CRITERIA
    // All options are only relevant for C2 - handle in code.
    c = subCriteria("C", c);

    // D CRITERIA:
    // ONLY subcriteria.
    d = subCriteria("D", d);

    // The dictionaries used in the view

    var subcriteria = new Dictionary<string, string>(){
    {"A", a},
    {"B", b_subcriteria},
    {"C", c},
    {"D", d}
    };


    var options = new Dictionary<string, string>(){
    {"B", b_options},
    };



    // Functions relevant to string separation

    string subCriteria(string element, string bigstring)
    {
        return bigstring.Replace("+", ";" + element);
    }

    string inString(string element, string bigstring)
    {
        if (bigstring.Contains(element))
        {
            return "active";
        }
        return "inactive";
    }

    string inList(string element, string[] bigstring)
    {
        foreach (string el in bigstring)
        {
            if (bigstring.Contains(element))
            {
                return "active";
            }
        }
        return "inactive";
    }

    void iconChooser(string compare)
    {
        if (compare == "active")
        {
            <span class="material-icons" style="color:darkgreen">
                done
            </span>
        }
        else if (compare == "maybe")
        {
            <span class="material-icons">
                pause
            </span>
        }
        else
        {
            <span class="material-icons" style="color:darkred">
                close
            </span>
        }
    }

    string removeOuterParenthesis(string wrapped)
    {
        if (wrapped.Length > 2)
        {
            if (wrapped.StartsWith("(") && wrapped.EndsWith(")"))
            {
                return wrapped.Substring(1, wrapped.Length - 2);
            }
        }
        return wrapped;
    }

    Dictionary<string, Dictionary<string, object>> parseDictNested(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json.ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
    }


    Dictionary<string, object> parseDictObject(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json.ToString()).ToObject<Dictionary<string, object>>();
    }

    Dictionary<string, string> parseDictString(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json.ToString()).ToObject<Dictionary<string, string>>();
    }

    void indicatordots(string unit, SpeciesAssessment2021MinMaxProbableIntervall quantile)
    {
        @if (unit == "%")
        {
            <span class="indicator_dot" style="right: @quantile.Max%">
                <span class="indicator_text max"> Max @quantile.Max@unit</span>
                <span class="dot_dot"></span>
            </span>
            <span class="indicator_dot" style="right: @quantile.Calculated%">
                <span class="indicator_text calc"> Calculated @quantile.Calculated@unit</span>
                <span class="dot_dot"></span>
            </span>
            @if (@quantile.Probable.Length > 0)
            {
                <span class="indicator_dot" style="right: @quantile.Probable%">
                    <span class="indicator_text prob">Probable @quantile.Probable@unit</span>
                    <span class="dot_dot"></span>
                </span>
            }
            <span class="indicator_dot" style="right: @quantile.Min%">
                <span class="indicator_text min"> Min @quantile.Min@unit</span>
                <span class="dot_dot"></span>
            </span>
        }
    }


    void mmpi(string value, SpeciesAssessment2021MinMaxProbableIntervall quantile)
    {

        var json_quantile = parseDictObject(value);
        string unit = json_quantile.ContainsKey("unit") ? json_quantile["unit"].ToString() : "";
        string comparator = json_quantile.ContainsKey("comparator") ? json_quantile["comparator"].ToString() : "";
        string min = @quantile.Min;
        string max = @quantile.Max;
        string estimated = "-";


        if (quantile.Punktestimat == false) // true = default, thus may still include blank fields.
        {
            estimated = @quantile.Maxintervall + " - " + @quantile.Minintervall;
        }
        else
        {
            estimated = @quantile.Probable;
        }

        if (json_quantile.ContainsKey("threshold"))
        {
            var thresholds = parseDictString(json_quantile["threshold"].ToString());

            <div class="category_graph LC">

                 <span>@{indicatordots(unit, quantile);}</span>
                @{

                    int previous_threshold = 100;
                    int width = 0;
                    int flex = 1;
                }

                @foreach (var (cat, catval) in thresholds)
                {
                    int n;
                    bool isNumeric = int.TryParse(catval, out n);
                    if (isNumeric)
                    {
                        if (unit == "%")
                        {
                            width = previous_threshold - n;
                        }
                        else
                        {
                            width = 20;
                            flex = n;
                        }
                    }
                    else
                    {
                        width = 20;
                    }
                    <div class="@cat category_graph_element" style="width:@width%;flex:@flex">
                        @cat
                        <br />
                        <span>@comparator@catval@unit</span>
                    </div>
                    previous_threshold = n;
                }
            </div>
        }
        <p>
            Estimert verdi ligger på @quantile.Calculated @unit.
            Det antas en nedgang på mellom @min@unit og @max@unit@if (estimated.Length > 0)
            {<span>, som mest trolig ligger på @estimated @unit</span>}.
        </p>

    }
}


@if (!string.IsNullOrEmpty(Model.CriteriaSummarized) &&
            (Model.Category.Contains("CR") ||
           Model.Category.Contains("EN") ||
           Model.Category.Contains("VU") ||
           Model.Category.Contains("NT")
 ))
{
    <div class="page_section criteria">

        <h2>@ViewBag.glossary["criteria"]["tagline"]</h2>
        <p>@ViewBag.glossary["criteria"]["description"]</p>

        <div class="page_section">
            <h3>@ViewBag.glossary["criteria"]["subheading"]</h3>


            @*
                // TODO: FIX BUTTONS. MAKE URLS, make pretty, add link
            *@

            <p>@Model.CriteriaSummarized<br /></p>
            <button>Gå til ordliste</button>
            <button>Gå til metode</button>


            @*
                // TODO: switch not working when moving up one level due to type difference.
                //
                @Model.A1
                @Model.A1.ReductionBasedOn

                @Model.A1.QuantifiedReduction
                        @Model.A2.PreliminaryCategory
            *@


        </div>

        <!-- MAIN CRITERIA -->
        @foreach (var (key, value) in criteria)
        {

            <div class="criteria_element @inString(key, @Model.CriteriaSummarized) listitem_criteria">
                <h4>
                    @{ iconChooser(inString(key, Model.CriteriaSummarized)); }
                </h4>

                <div class="listitem_text_field">
                    <h4>@key -  @value["title"]</h4>

                    @if (@value.ContainsKey("description"))
                    {
                        <p class="criteria_description">
                            @value["description"]
                        </p>
                    }

                    <!-- SUB CRITERIA : obtain and reformat necessary data -->
                    @if (@value.ContainsKey("subcriteria"))
                    {
                        <div class="criteria_subcriteria">
                            @{
                                var newDictionary2 = parseDictNested(value["subcriteria"].ToString());
                            }
                            @foreach (var (k, v) in newDictionary2)
                            {
                                <!-- ITERATE THROUGH ALL SUBCRITERIA -->
                                <div class=" @inString(k, subcriteria[key]) listitem_criteria">

                                    @{
                                        var quantile = GetQuantileForCriteria(k);
                                        iconChooser(@inString(k, subcriteria[key]));
                                    }

                                    <div class="listitem_text_field">

                                        <h5>@k <span>@v["title"]</span></h5>
                                        @if (v.ContainsKey("description"))
                                        {
                                            <p>@v["description"]</p>
                                        }


                                        @if (quantile != null) // for denne har vi en slik
                                        {
                                            <div class="criteria_results">
                                                <p>
                                                    @{ mmpi(v["content"].ToString(), GetQuantileForCriteria(k)); }
                                                </p>
                                            </div>
                                        }


                                        <!-- SUBCRITERIA SUBOPTIONS FOR A & C-CRITERIA -->
                                        @{
                                            var splitlist = subcriteria[key].Split(";");
                                            var current_element = "";
                                            foreach (string element in splitlist)
                                            {
                                                // k = current criteria
                                                if (element.Contains(k))
                                                {
                                                    current_element = element;
                                                }
                                            }
                                            current_element = current_element.Replace(k, "");
                                            current_element = removeOuterParenthesis(current_element);
                                            if (key == "C")
                                            {
                                                // THIS IS ONLY RELEVANT FOR C2
                                                current_element = current_element.Replace("a(i,ii)", "a(i)a(ii)");
                                                current_element = current_element.Replace(")", ");");
                                                current_element = current_element.Replace(" ", "");
                                            }
                                            else
                                            {
                                                current_element = current_element.Replace(",", ";");
                                            }

                                            var currentlist = current_element.Split(";");

                                        }

                                        <!--- ITERATE SUBOPTIONS FOR Ca2 -->
                                        @if (v.ContainsKey("subsub"))
                                        {
                                            <div class="subsub_list">
                                                @{
                                                    var subdict = parseDictNested(@v["subsub"].ToString());
                                                }

                                                @if (@current_element.Length > 0)
                                                {
                                                    <h6 class="subheading">Kunnskapsgrunnlag</h6>

                                                    @foreach (var (subkey, subval) in subdict)
                                                    {
                                                        <div class="@inList(subkey, currentlist) listitem_criteria">
                                                            @{ iconChooser(inList(subkey, currentlist)); }
                                                            <h6 class="listitem_text_field">
                                                                <b>@subkey</b>
                                                                <span>@subval["title"]</span>
                                                            </h6>
                                                        </div>
                                                    }
                                                }

                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    <!-- OPTIONS-->
                    @if (@value.ContainsKey("options"))
                    {
                        <div class="criteria_options">
                            @{
                                var newDictionary = parseDictNested(value["options"].ToString());
                            }
                            <h5 class="subheading"> Underkriterier </h5>

                            @if (@value.ContainsKey("options_description"))
                            {
                                <p class="criteria_description">
                                    @value["options_description"]
                                </p>
                            }
                            @foreach (var (k, v) in newDictionary)
                            {

                                <div class="listitem_criteria @inString(k, options[key]) ">
                                    @{ iconChooser(inString(k, options[key])); }
                                    <div class="listitem_text_field">
                                        <h5>@k. <span>@v["title"]</span></h5>
                                        @if (v.ContainsKey("description"))
                                        {
                                            <p>@v["description"] </p>

                                        }
                                        @if (v.ContainsKey("sub"))
                                        {

                                            <div class="subsub_list">
                                                @{
                                                    var currentlist = options[key].Split(";");
                                                    var current_element = "";
                                                    foreach (string element in currentlist)
                                                    {
                                                        // k = current criteria
                                                        if (element.Contains(k))
                                                        {
                                                            current_element = element;
                                                        }
                                                    }
                                                    current_element = current_element.Replace(k, "");
                                                    current_element = removeOuterParenthesis(current_element);
                                                    var clean_list = current_element.Split(",");
                                                    var subdict = parseDictNested(@v["sub"].ToString());
                                                }


                                                @foreach (var (subkey, subvalue) in subdict)
                                                {
                                                    <div class="listitem_criteria @inList(subkey, clean_list)">
                                                        @{ iconChooser(inList(subkey, clean_list)); }
                                                        <h6 class="listitem_text_field">
                                                            <span>@subkey </span>
                                                            <span>@subvalue["title"]</span>
                                                        </h6>
                                                    </div>
                                                }

                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }<!-- END OPTIONS-->
                </div>
            </div>
        }
    </div>
}
