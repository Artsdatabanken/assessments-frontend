@model AlienSpeciesDetailViewModel
@using Assessments.Mapping.AlienSpecies.Model.Enums
@using System;

@{
    var showPage = @Model.Assessment.Category != AlienSpeciesAssessment2023Category.NR;
    /* Risk Matrix

   FILLED LINE: BEST ESTIMATE OF MARTIX PLACEMENT
   -> Determines risk category

   Dashed/Dotted Line - Uncertainty
   -> one step up/down from risk category
       x-axis: A-C-criteria. Rules will come later.
       y-axis: the/those criteria D-I with the highest value       
           if UncertaintyValues.Count > 1 = has uncertainty on the y-axis
                upwards uncertainty: the highest number
                downwards uncertainty: all determening criteria must have the same for it to be added
           if UncertaintyValues.Count == 1 = no uncertainty on the y-axis
     */
}

<div is-visible="showPage">    

    @{
        // Risk category placement
        int x = Model.Assessment.ScoreInvasionPotential.Value;
        int y = Model.Assessment.ScoreEcologicalEffect.Value;
        List<AlienSpeciesAssessment2023Criterion> yAxisCriteriaList = new List<AlienSpeciesAssessment2023Criterion>();    

        // Names / Descriptions         
        string xAxisLabel = "Invasjonspotensial";
        string yAxisLabel = "Økologisk effekt";        

        // Uncertainty Values for y

        // 1. Obtain all counting criteria
        foreach (var criterion in Model.Assessment.Criteria)
        {
            var letter = criterion.CriteriaLetter;
            var xAxis = (letter == AlienSpeciesAssessment2023CriteriaLetter.A || letter == AlienSpeciesAssessment2023CriteriaLetter.B || letter == AlienSpeciesAssessment2023CriteriaLetter.C);
            if (!xAxis){
                if (criterion.UncertaintyValues.Count > 1 && criterion.Value > 0 && criterion.Value == y)
                {
                    yAxisCriteriaList.Add(criterion);
                }
            }
        }

        // 2. Obtain higher and lower uncertainties
        int yHigherUncertainty = y;
        int yLowerUncertainty = y;

        List<int> lowestYList = new List<int>();
        foreach (var criterion in yAxisCriteriaList) 
        {            
            int criteriaLowestY = y;
            foreach (var uncertainty in criterion.UncertaintyValues)
            {                
                if(uncertainty > yHigherUncertainty) // Always use highest uncertainty 
                {
                    yHigherUncertainty = uncertainty;
                }                
                if(uncertainty < y)
                {
                    lowestYList.Add(uncertainty); // dump alllower uncertainties into one comparison-list
                }
            }   
        }        

        // 3. set lower uncertainty if all lower uncertainty values are the same
        if(lowestYList.Distinct().Count() == 1)
        {
            yLowerUncertainty = lowestYList[0];
        }

        // Uncertainty Values for x

        // 1. Obtain A, B & C criteria
        var critA = Model.Assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.A).FirstOrDefault();
        var critB = Model.Assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.B).FirstOrDefault();
        var critC = Model.Assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.C).FirstOrDefault();

        static int abAdjustment(int x, int y)
        {
            int[,] abAdjustmentMatrix = { 
            // Crit B -->
            { 0, 1, 1, 2 }, // Crit A
            { 0, 1, 2, 2 }, // |
            { 1, 2, 2, 3 }, // |
            { 1, 2, 3, 3 }  // V
        };
            // TODO: FACT CHECK: Assuming it's -1 due to 0-indexing?
            return abAdjustmentMatrix[x-1,y-1];
        }

        // 2. Calculate level used to determine if a criterion is decisive
        var adjustedAB = abAdjustment(critA.Value,critB.Value); 
        var adjustedA = Math.Min(adjustedAB, critA.Value);
        var adjustedB = Math.Min(adjustedAB, critB.Value);
        var level = Math.Max(adjustedAB, critC.Value);

        // 3. Add decisive criteria to list
        List<int> uncertaintiesAB = new List<int>(); 
        List<int> uncertaintiesC = new List<int>();
        List<AlienSpeciesAssessment2023Criterion> decisiveCrits = new List<AlienSpeciesAssessment2023Criterion>();

        if (adjustedA == level) {
            decisiveCrits.Add(critA);
        }
        if (adjustedB == level) {
            decisiveCrits.Add(critB);
        }      
        if (critC.Value == level) {
            decisiveCrits.Add(critC);    
        }

        // 4. Obtain uncertainty values for decisive criteria

        if (adjustedA == level || adjustedB == level)
        {
            var minUL_A = critA.UncertaintyValues.Count == 0 ? critA.Value : critA.UncertaintyValues.AsQueryable().Min(); 
            var minUL_B = critB.UncertaintyValues.Count == 0 ? critB.Value : critB.UncertaintyValues.AsQueryable().Min(); 
            var minUL_AB_adj = abAdjustment(minUL_A, minUL_B); 
            var minUL_AB = Math.Max(minUL_AB_adj, adjustedAB - 1);

            var maxUL_A = critA.UncertaintyValues.Count == 0 ? critA.Value : critA.UncertaintyValues.AsQueryable().Max(); 
            var maxUL_B = critB.UncertaintyValues.Count == 0 ? critB.Value : critB.UncertaintyValues.AsQueryable().Max(); 
            var maxUL_AB_adj = abAdjustment(maxUL_A, maxUL_B); 
            var maxUL_AB = Math.Min(maxUL_AB_adj, adjustedAB + 1);

            for (var i = minUL_AB; i <= maxUL_AB; i++) {
                uncertaintiesAB.Add(i);
            }
        }
        if (critC.Value == level) {
            uncertaintiesC = critC.UncertaintyValues; //const uncertaintiesC = c === level ? critC.UncertaintyValues : []
        }

        // 5. Obtain all values for uncertainty levels by mering AB & C lists for uncertainties, make them distinct, and sort them.
        List<int> allUncertaintyLevels = uncertaintiesAB.Union(uncertaintiesC).ToList();
        allUncertaintyLevels.Sort(); //const allUncertaintyLevels = [...new Set([...uncertaintiesAB,...uncertaintiesC])].sort()


        // 6. Obtain all the decisive uncertainties
        List<List<int>> decisiveUncertainties = new List<List<int>>();

        if (adjustedA == level || adjustedB == level) {
            decisiveUncertainties.Add(uncertaintiesAB);
        }

        if (critC.Value == level) {
            decisiveUncertainties.Add(uncertaintiesC);
        }


        // 7. ORIGINAL: sweepingUncertaintyLevels = decisiveUncertainties.reduce((acc, uv) => acc.filter(n => n >= level || uv.indexOf(n) > -1), allUncertaintyLevels);
        var sweepingUncertaintyLevels = decisiveUncertainties.Aggregate(allUncertaintyLevels, (accumulator, current) => accumulator.Where(x => x >= level || current.Contains(x)).ToList());

        // 7.5: removeuncertainty values not next to the actual value (x is the actual value)
        sweepingUncertaintyLevels = sweepingUncertaintyLevels.Where(val => x - 1 == val || x == val || x + 1 ==  val).ToList();

        // 8. The end values.
        IEnumerable<int> xUncertainties = sweepingUncertaintyLevels;       
        int xHigherUncertainty = Math.Max(sweepingUncertaintyLevels.AsQueryable().Max(),x); 
        int xLowerUncertainty =  Math.Min(sweepingUncertaintyLevels.AsQueryable().Min(),x);
    }


@functions{
    string className(int current_x, int current_y, int place_x, int place_y,int highestUncertainty_y, int lowestUncertainty_y,int highestUncertainty_x, int lowestUncertainty_x){

        string name = "" + current_x + current_y;
        string place = "" + place_x + place_y;
        string classN = "inactive";

        if(current_x == place_x)
        {
            // Add UPWARDS uncertainty to the y-axis only for the current column on the x-axis.
            if (current_y <= highestUncertainty_y && current_y > place_y)
            {
                // y value smaller than the highest cap
                // higher than the category value
                classN = "uncertain " + highestUncertainty_y + " " +current_y + " " + place_y;               
            }

            // Add DOWNWARDS uncertainty to the y-axis only for the current column on the x-axis.
            if (current_y >= lowestUncertainty_y && current_y < place_y)
            {
                // y value higher than the lowest cap
                // lower than the category value
                classN = "uncertain " + lowestUncertainty_y + " " +current_y + " " + place_y;               
            }
        }

         if(current_y == place_y)
        {
            // Add UPWARDS uncertainty to the x-axis only for the current column on the x-axis.
            if (current_x <= highestUncertainty_x && current_x > place_x)
            {
               
                classN = "uncertain " + highestUncertainty_x + " " +current_x + " " + place_x;               
            }

            // Add DOWNWARDS uncertainty to the y-axis only for the current column on the x-axis.
            if (current_x >= lowestUncertainty_x && current_x < place_x)
            {
                // y value higher than the lowest cap
                // lower than the category value
                classN = "uncertain " + lowestUncertainty_x + " " +current_x + " " + place_x;               
            }
        }

        if(name == place)
        {
            classN = "active";            
        }
        return classN;
    }
}
    <h2>Risikomatrisen</h2>

    <p>
        x: @x - Usikkerhet: Max @xHigherUncertainty Min: @xLowerUncertainty<br/>
        y: @y - Usikkerhet: Max @yHigherUncertainty Min: @yLowerUncertainty <br />     
        "sweepingUncertaintyLevels": @{
             foreach (var uncertainty in xUncertainties)
            {
                <b>@uncertainty</b>
            }   
        }
    </p>

    <figure class="risk-level-matrix">
        <table>
            <tbody>
            
                <tr>
                    <td rowspan="4" class="legend legend-v"><span>@yAxisLabel</span></td>
                    <td class="description"><span>4</span> stor</td>
                    <td class="cat-ph @className(1, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-41">14</td>
                    <td class="cat-hi @className(2, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"  id="risk-42">24</td>
                    <td class="cat-se @className(3, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"  id="risk-43">34</td>
                    <td class="cat-se @className(4, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"  id="risk-44">44</td>
                </tr>
                <tr>
                    <td class="description"><span>3</span> middels</td>
                    <td class="cat-lo @className(1, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-31">13</td>
                    <td class="cat-hi @className(2, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-32">23</td>
                    <td class="cat-hi @className(3, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-33">33</td>
                    <td class="cat-se @className(4, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-34">43</td>
                </tr>
                <tr>
                    <td class="description"><span>2</span> liten</td>
                    <td class="cat-lo @className(1, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-21">12</td>
                    <td class="cat-lo @className(2, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-22">22</td>
                    <td class="cat-lo @className(3, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-23">32</td>
                    <td class="cat-hi @className(4, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-24">42</td>
                </tr>
                <tr>
                    <td class="description"><span>1</span> ingen kjent</td>
                    <td class="cat-nk @className(1, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-11">11</td>
                    <td class="cat-lo @className(2, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-12">21</td>
                    <td class="cat-lo @className(3, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-13">31</td>
                    <td class="cat-ph @className(4, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )" id="risk-14">41</td>
                </tr>
                <tr>
                    <td class="description"></td>
                    <td class="description"></td>
                    <td class="description"><span>1</span> lite</td>
                    <td class="description"><span>2</span> begrensa</td>
                    <td class="description"><span>3</span> moderat</td>
                    <td class="description"><span>4</span> stor</td>
                </tr>
            <tr>
                <td class="legend"></td>
                <td></td>
                <td colspan="4" class="legend">@xAxisLabel</td>
            </tr>
            </tbody>
        </table>
       <!--  <a class="info-link" href="/pages/239659" target="_blank">Forklaring på risikomatrisen</a>-->
    </figure>
</div>