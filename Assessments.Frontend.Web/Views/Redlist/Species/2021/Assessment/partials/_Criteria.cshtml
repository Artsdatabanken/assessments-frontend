
@model SpeciesAssessment2021
@*
    TODO: IMPROVE AND MOVE LOGIC FROM VIEW. NOT CRITICAL, WILL NOT PRIORITIZE.

    This component takes in the json file of criteria and displays it
    It also takes in the unhandled criteriasummarized string and trasforms it
    into two useable dictionaries which are then matched to relevant places in the json.
*@


@functions {

    private SpeciesAssessment2021MinMaxProbableIntervall GetQuantileForCriteria(string key)
    {
        switch (key)
        {
            case "A1":
                return Model.A1.QuantifiedReduction;
            case "A2":
                return Model.A2.QuantifiedReduction;
            case "A3":
                return Model.A3.QuantifiedReduction;
            case "A4":
                return Model.A4.QuantifiedReduction;
            case "B1":
                return Model.B1.Statistics;
            case "B2":
                return Model.B2.Statistics;
            case "BAii":
                return Model.BAii.Statistics;
            case "C":
                return Model.C.Statistics;
            case "C1":
                return Model.C1.Statistics;
            case "C2Ai":
                return Model.C2Ai.Statistics;
        }
        return null;
    }
}


@{
    // MAPPING WHICH SHOULD HAVE BEEN MOVED  ELSEWHERE
    string GetThresholdValue(string key)
    {
        switch (key)
        {
            case "A1":
                return Model.A1.PreliminaryCategory;
            case "A2":
                return Model.A2.PreliminaryCategory;
            case "A3":
                return Model.A3.PreliminaryCategory;
            case "A4":
                return Model.A4.PreliminaryCategory;
            case "B1":
                return Model.B1.PreliminaryCategory;
            case "B2":
                return Model.B2.PreliminaryCategory;
            case "BAii":
                return Model.BAii.PreliminaryCategory;
            case "C":
                return Model.C.PreliminaryCategory;
            case "C1":
                return Model.C1.ThresholdValue;
            case "C2Ai":
                return Model.C2Ai.ThresholdValue;
            case "D1":
                return Model.D1PreliminaryCategory;
            case "D2":
                return Model.D2PreliminaryCategory;

        }
        return null;
    }


    Dictionary<string, Dictionary<string, object>> parseDictNested(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, Dictionary<string, object>>>();
    }

    Dictionary<string, object> parseDictObject(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, object>>();
    }

    Dictionary<string, string> parseDictString(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, string>>();
    }

    // Cast JSON to dictionary for easy iteration. Cant use those above as it's not a string...
    Dictionary<string, Dictionary<string, object>> criteria = ViewBag.kriterier.ToObject<Dictionary<string, Dictionary<string, object>>>();

    // CRITERIA SUMMARIZED SORTED BY SUBCRITERIA
    var subcriteria = Criteria.sortCriteria(Model.CriteriaSummarized);
    string options = "";
    if (subcriteria["B"].Contains("+"))
    {
        options = subcriteria["B"].Split("+")[1];
    }

    // FUNCTIONAL COMPONENTS BECAUSE LETS PRETEND THIS IS REACT.

    void hasKey(string key, Dictionary<string, object> field)
    {
        @if (field.ContainsKey(key))
        {
            <p class="@key">
                @field[key]
            </p>
        }

    }

    // ICON USED TO DECIDE IF ACTIVE OR NOT. X and V icons.
    void iconChooser(string compare)
    {
        if (compare == "active")
        {
            <span class="material-icons" style="color:darkgreen">
                done
            </span>
        }
        else if (compare == "maybe")
        {
            <span class="material-icons">
                pause
            </span>
        }
        else
        {
            <span class="material-icons" style="color:darkred">
                close
            </span>
        }
    }

    // THE LIST SHOWING A SUBCATEGORY'S THRESHOLD VALUES
    void thresholdsList(Dictionary<string, string> thresholds, string unit, SpeciesAssessment2021MinMaxProbableIntervall quantile, string comparator, string thresholdValue)
    {
        <p> VERDI: @thresholdValue</p>
        <ul>
            @foreach (var (cat, catval) in thresholds)
            {
                string className = "inactive";
                @if (cat != null && thresholdValue != null && cat.Contains(thresholdValue))
                {
                    className = "active";
                }
                <li class="thresholdlist @className">
                    <span class="graphic_element @cat">@cat</span>
                    <span>@comparator @catval @unit</span>
                </li>
            }
        </ul>
    }


    // MAX MIN PROBABLE INTERVAL VALUES presentation
    void mmpi(string value, SpeciesAssessment2021MinMaxProbableIntervall quantile, string key, string k)
    {

        var json_quantile = parseDictObject(value);
        string unit = json_quantile.ContainsKey("unit") ? json_quantile["unit"].ToString() : "";
        string comparator = json_quantile.ContainsKey("comparator") ? json_quantile["comparator"].ToString() : "";
        string min = @quantile.Min;
        string max = @quantile.Max;
        string estimated = "-";

        <div class="criteria_results">

            @if (quantile.Punktestimat == false) // true = default, thus may still include blank fields.
            {
                estimated = @quantile.Maxintervall + " - " + @quantile.Minintervall;
            }
            else
            {
                estimated = @quantile.Probable;
            }

            <p>

                <span>Estimert verdi ligger på @quantile.Calculated @unit.</span><br />
                <span>Det antas en nedgang på mellom @min @unit og @max @unit.</span><br />


                <span>
                    @if (estimated.Length > 0)
                    {<span>Den mest trolige verdien er @estimated @unit</span>}.
                </span>
            </p>

            @if (json_quantile.ContainsKey("threshold"))
            {
                var thresholds = parseDictString(json_quantile["threshold"].ToString());
                string thresholdValue = GetThresholdValue(k);
                thresholdsList(thresholds, unit, quantile, comparator, thresholdValue);
            }
        </div>
    }


    // Check for and present number-data including thresholds
    void getQuantile(Dictionary<string, object> value, string k, string key)
    {
        var quantile = GetQuantileForCriteria(k);
        if (quantile != null)
        {
            mmpi(value["content"].ToString(), GetQuantileForCriteria(k), key, k);
        }
    }

    void getModel(string key)
    {

        @*
            TODO: This should not be necessary, as thing SHOULD be in the same object, but alas.
        *@

        List<string> ReductionBasedOn = null;
        string PreliminaryCategory = null;
        string ThresholdValue = null;

        if (key == "A1")
        {
            ReductionBasedOn = Model.A1.ReductionBasedOn;
            PreliminaryCategory = Model.A1.PreliminaryCategory;
        }
        else if (key == "A2")
        {
            ReductionBasedOn = Model.A2.ReductionBasedOn;
            PreliminaryCategory = Model.A2.PreliminaryCategory;
        }
        else if (key == "A3")
        {
            ReductionBasedOn = Model.A3.ReductionBasedOn;
            PreliminaryCategory = Model.A3.PreliminaryCategory;
        }
        else if (key == "A4")
        {
            ReductionBasedOn = Model.A4.ReductionBasedOn;
            PreliminaryCategory = Model.A4.PreliminaryCategory;
        }
        else if (key == "B1")
        {
            PreliminaryCategory = Model.B1.PreliminaryCategory;
        }
        else if (key == "B2")
        {
            PreliminaryCategory = Model.B2.PreliminaryCategory;
        }
        else if (key == "BAii")
        {
            PreliminaryCategory = Model.BAii.PreliminaryCategory;
        }
        else if (key == "C")
        {
            PreliminaryCategory = Model.C.PreliminaryCategory;
        }
        else if (key == "C1")
        {
            ThresholdValue = Model.C1.ThresholdValue;
        }
        else if (key == "C2Ai")
        {
            ThresholdValue = Model.C2Ai.ThresholdValue;
        }
        else if (key == "D1")
        {
            PreliminaryCategory = Model.D1PreliminaryCategory;
        }
        else if (key == "D2")
        {
            PreliminaryCategory = Model.D2PreliminaryCategory;
        }

        @if (Helpers.isNotEmpty(PreliminaryCategory) || Helpers.isNotEmpty(ThresholdValue) || ReductionBasedOn != null && ReductionBasedOn.Count != 0)
        {
            <div style="padding:10px; background:pink;">
                @if (ReductionBasedOn != null)
                {
                    <span>
                        Reduksjon baser på :
                        @foreach (string el in ReductionBasedOn)
                        {<span>@el</span>}
                    </span>
                    <br />
                }

                @if (Helpers.isNotEmpty(ThresholdValue))
                {<span>Terskelverdi: @ThresholdValue</span><br />}
                @if (Helpers.isNotEmpty(PreliminaryCategory))
                {<span>Kategori basert på kriterie: @PreliminaryCategory</span><br />}
            </div>
        }
    }

    //GenerationTime
    void getGenerationTime(String key)
    {
        int generation3 = Math.Max(int.Parse(Model.GenerationLength) * 3, 10);
        @if (key == "A" || key == "C")
        {
            <p class="generation_time" style="background:hotpink;padding:10px;">
               
                Generasjonstiden er på @Model.GenerationLength år som gir en vurderingsperiode på @generation3 år
            </p>
            <br />
        }
    }
}<!-- END OF ALL-->


@if (!string.IsNullOrEmpty(Model.CriteriaSummarized) && (Model.Category.Contains("CR") || Model.Category.Contains("EN") ||
Model.Category.Contains("VU") || Model.Category.Contains("NT")))

{
    <div class="page_section criteria">
        <div class="criteria_description">
            <h3>@ViewBag.glossary["criteria"]["tagline"]</h3>
            <p>@ViewBag.glossary["criteria"]["description"]</p>
            <button class="tertiary tinybutton">Gå til metode <span class="material-icons">open_in_new</span></button>
            <h4>@ViewBag.glossary["criteria"]["subheading"]</h4>
            <p>@Model.CriteriaSummarized<br /></p>
            @*// TODO: FIX BUTTONS. MAKE URLS, make pretty, add link*@
            <button class="tertiary tinybutton">Gå til ordliste <span class="material-icons">open_in_new</span></button>
        </div>

        <button class="changetab active">Kompakt</button><button class="changetab">Full visning</button>
        <div class="tabbed_element_container">
            <!-- MAIN CRITERIA -->
            @foreach (var (key, value) in criteria)
            {
                <div class="criteria_element @Criteria.inString(key, @Model.CriteriaSummarized) listitem_criteria">

                    @{ iconChooser(Criteria.inString(key, Model.CriteriaSummarized)); }
                    <div class="listitem_text_field">
                        <h4>@key -  @value["title"]</h4>
                        @{ hasKey("description", @value);}
                        @{ getModel(key);}
                        @{ getQuantile(value, key, key);}


                        <!-- SUB CRITERIA : obtain and reformat necessary data -->
                        @if (@value.ContainsKey("subcriteria"))
                        {
                            <div class="criteria_subcriteria">
                                @{
                                    var thesubcriteria = parseDictNested(value["subcriteria"].ToString());
                                }
                                @foreach (var (k, v) in thesubcriteria)
                                {
                                    <!-- ITERATE THROUGH ALL SUBCRITERIA -->
                                    <div class=" @Criteria.inString(k, subcriteria[key]) listitem_criteria">

                                        @{iconChooser(@Criteria.inString(k, subcriteria[key]));}
                                        <div class="listitem_text_field">

                                            <h5>@k <span>@v["title"]</span></h5>
                                            @{ hasKey("description", v);}
                                            @{ getGenerationTime(key);}
                                            @{ getModel(k);}
                                            @{ getQuantile(v, k, key);}

                                            <!-- SUBCRITERIA SUBOPTIONS FOR A & C-CRITERIA && SUBOPTIONS FOR Ca2 -->
                                            @if (v.ContainsKey("subsub"))
                                            {
                                                string[] currentlist = Criteria.obtainSubCriteriaList(subcriteria[key].Split(";"), k);
                                                var subdict = parseDictNested(@v["subsub"].ToString());
                                                @if (currentlist.Length > 0)
                                                {
                                                    <div class="subsub_list">
                                                        <h6 class="subheading">Kunnskapsgrunnlag</h6>

                                                        @foreach (var (subkey, subval) in subdict)
                                                        {
                                                            <div class="@Criteria.inList(subkey, currentlist) listitem_criteria">
                                                                @{ iconChooser(Criteria.inList(subkey, currentlist)); }
                                                                <h6 class="listitem_text_field">
                                                                    <b>@subkey</b>
                                                                    <span>@subval["title"]</span>
                                                                </h6>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        <!-- OPTIONS-->
                        @if (@value.ContainsKey("options"))
                        {
                            var newDictionary = parseDictNested(value["options"].ToString());
                            <div class="criteria_options">
                                <h5 class="subheading"> Underkriterier </h5>
                                @{ hasKey("options_description", @value);}
                                @foreach (var (k, v) in newDictionary)
                                {
                                    <div class="listitem_criteria @Criteria.inString(k, options) ">
                                        @{ iconChooser(Criteria.inString(k, options)); }
                                        <div class="listitem_text_field">
                                            <h5>@k. <span>@v["title"]</span></h5>
                                            @{ //hasKey("description", v)
                                                ;}
                                            @if (v.ContainsKey("sub"))
                                            {
                                                <div class="subsub_list">
                                                    @{
                                                        var currentlist = options.Split(";");
                                                        var current_element = "";
                                                        foreach (string element in currentlist)
                                                        {
                                                            if (element.Contains(k))
                                                            {
                                                                current_element = element;
                                                            }
                                                        }
                                                        current_element = current_element.Replace(k, "");
                                                        current_element = Criteria.removeOuterParenthesis(current_element);
                                                        var clean_list = current_element.Split(",");
                                                        var subdict = parseDictNested(@v["sub"].ToString());
                                                    }
                                                    @foreach (var (subkey, subvalue) in subdict)
                                                    {
                                                        <div class="listitem_criteria @Criteria.inList(subkey, clean_list)">
                                                            @{ iconChooser(Criteria.inList(subkey, clean_list)); }
                                                            <h6 class="listitem_text_field">
                                                                <span>@subkey </span>
                                                                <span>@subvalue["title"]</span>
                                                            </h6>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }<!-- END OPTIONS-->
                    </div>
                </div>
            }
        </div>


    </div>
}
else
{
    <partial name="/Views/Redlist/Species/2021/Assessment/partials/_NoCriteria.cshtml" />

}
