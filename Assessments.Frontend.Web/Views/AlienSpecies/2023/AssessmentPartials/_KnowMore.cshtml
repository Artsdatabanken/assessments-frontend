@using Assessments.Mapping.AlienSpecies.Model.Enums;
@model AlienSpeciesDetailViewModel

@{
    var areaText = Model.Assessment.EvaluationContext == Assessments.Mapping.AlienSpecies.Model.Enums.AlienSpeciesAssessment2023EvaluationContext.N ? "i Norge" : "på Svalbard";
    var isRegionallyAlien = Model.Assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.RegionallyAlien;
    var isDoorKnocker = Model.Assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.DoorKnocker;
    var isNrButNotAlienSpecie = Model.Assessment.Category == AlienSpeciesAssessment2023Category.NR && Model.Assessment.AlienSpeciesCategory != AlienSpeciecAssessment2023AlienSpeciesCategory.NotAlienSpecie;

    string ComingFromText()
    {
        if (Model.Assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.RegionallyAlien)
            return "vurderingsområdet";
        else if (Model.Assessment.EvaluationContext == Assessments.Mapping.AlienSpecies.Model.Enums.AlienSpeciesAssessment2023EvaluationContext.N)
            return "Norge";
        else
            return "Svalbard";
    }

    var isLimnic = Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.Limnisk || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimMar || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimTer || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimMarTer;
    var isTerrestrial = Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.Terrestrisk || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.MarTer || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimTer || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimMarTer;
    var isMarine = Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.Marint || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimMar || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.MarTer || Model.Assessment.Environment == AlienSpeciesAssessment2023Environment.LimMarTer;

    var showEstablishmentClass = !(Model.Assessment.SpeciesStatus == AlienSpeciesAssessment2023SpeciesStatus.NotIndicated && !string.IsNullOrEmpty(Model.Assessment.UncertaintyStatusDescription));
    var showFirstObservation = Model.Assessment.YearsFirstRecord.ObservedEstablishmentInNorway.Count > 0 || !string.IsNullOrEmpty(Model.Assessment.YearsFirstRecord.Description) || !string.IsNullOrEmpty(Model.Assessment.ArrivedCountryFromDetails);

    string GetSpeciesStatusText()
    {
        var text = $"{Helpers.FixSpeciesLevelWithTranslation("{Arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName)} ";
        if (Model.Assessment.SpeciesStatus == AlienSpeciesAssessment2023SpeciesStatus.Abroad)
            return $"{text} forekommer ikke {areaText}.";
        if (Model.Assessment.SpeciesStatus == AlienSpeciesAssessment2023SpeciesStatus.C3)
            return $"{text} {Model.Assessment.SpeciesStatus.Description()}. Etter introduksjon har {Helpers.FixSpeciesLevelWithTranslation("{arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName)} selv spredd seg til minst ti forekomster der den er etablert.";
        return $"{text} {Model.Assessment.SpeciesStatus.Description().Replace("i Norge", areaText)}.";
    }

    string GetReproductionString()
    {
        var hasSexual = Model.Assessment.ReproductionSexual;
        var hasAsexual = Model.Assessment.ReproductionAsexual;
        var speciesLevel = Helpers.FixSpeciesLevelWithTranslation("{Arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName);
        if (hasSexual && !hasAsexual)
            return $"{speciesLevel} har seksuell reproduksjon.";
        else if (!hasSexual && hasAsexual)
            return $"{speciesLevel} har aseksuell reproduksjon.";
        else if (hasSexual && hasAsexual)
            return $"{speciesLevel} har både seksuell og aseksuell reproduksjon.";
        return string.Empty;
    }

    string GetLimnicOrTerrestrialExpansion()
    {
        if (isLimnic && isTerrestrial)
            return "Limlisk og terrestrisk utbredelse:";

        if (isLimnic)
            return "Limlisk utbredelse:";
        
        return "Terrestrisk utbredelse:";
    }

    string GetCameToNorwayFrom()
    {
        if (isRegionallyAlien)
            return $"{Helpers.FixSpeciesLevelWithTranslation("{Arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName)} kom til området der den er regionalt fremmed fra:";
        if (isDoorKnocker)
            return $"{Helpers.FixSpeciesLevelWithTranslation("{Arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName)} kan komme til {ComingFromText()} fra:";
        return $"{Helpers.FixSpeciesLevelWithTranslation("{Arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName)} kom til {ComingFromText()} fra:";
    }
}

<div id="@nameof(Constants.HeadingsNo.KnowMore)">
    <div class="page_section_header">
        <h2>@Constants.HeadingsNo.KnowMore @Helpers.FixSpeciesLevelWithTranslation("{arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName)</h2>
    </div>
    <div>
        <div is-visible="showEstablishmentClass">
            <h3>Etableringsstatus @areaText</h3>
            <p>
                @Helpers.FixSpeciesLevelWithTranslation("{Artens}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName) etableringsstatus bestemmes av den høyeste  etableringsklassen @Helpers.FixSpeciesLevelWithTranslation("{arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName) har @areaText i dag, fra å kun finnes utenlands til å være etablert i naturen med videre spredning.
            </p>
            <p>
                @GetSpeciesStatusText()
            </p>
            <p>@Html.Raw(Model.Assessment.UncertaintyStatusDescription)</p>
            <div is-visible="showFirstObservation">
                <table is-visible="Model.Assessment.YearsFirstRecord.ObservedEstablishmentInNorway.Count > 0" class="big-data-table">
                    <caption class="table-title">
                        <b>@Constants.AlienSpeciesTables.FirstObsTableTitle</b>
                        @Constants.AlienSpeciesTables.FirstObsTableDescription 
                    </caption>
                        <tr>
                            <th>@Constants.AlienSpeciesTables.FirstObsTableColumn1</th>
                            <th>@Constants.AlienSpeciesTables.FirstObsTableColumn2</th>
                            <th>@Html.Raw(@Constants.AlienSpeciesTables.FirstObsTableColumn3)</th>
                        </tr>
                        @foreach(var record in Model.Assessment.YearsFirstRecord.ObservedEstablishmentInNorway)
                        {
                            <tr>
                                <td>@record.Item1.DisplayName().ToLowerInvariant()</td>
                                <td><b class="only_mobile">@Constants.AlienSpeciesTables.FirstObsTableColumn2:</b>@record.Item2</td>
                                <td><b class="only_mobile">@Html.Raw(@Constants.AlienSpeciesTables.FirstObsTableColumn3):</b>@( record.Item3 ? "ja" : "nei" )</td>
                            </tr>
                        }
                </table>
                <p is-visible="!string.IsNullOrEmpty(Model.Assessment.YearsFirstRecord.Description)">
                    @Html.Raw(Model.Assessment.YearsFirstRecord.Description)
                </p>
                <p is-visible="!isNrButNotAlienSpecie && Model.Assessment.ArrivedCountryFrom != null && Model.Assessment.ArrivedCountryFrom.Count > 0">
                    @(GetCameToNorwayFrom()) @Model.Assessment.ArrivedCountryFrom.Select(x => x.DisplayName()).JoinAnd(", ", " og ").ToLowerInvariant()
                </p>
                <p>@Html.Raw(Model.Assessment.ArrivedCountryFromDetails)</p>
            </div>
        </div>
    </div>
    <div is-visible="!isNrButNotAlienSpecie">
        <h3>Global utbredelse</h3>
        <h4>@Helpers.FixSpeciesLevelWithTranslation("{Artens}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName) naturlige utbredelse.</h4>
        <p>
            Naturlig utbredelse omfatter de områdene arten forekommer i uten at det ligger menneskelig transport bak (dvs. alle former for tilsikta eller utilsikta forflytning av arten).
        </p>
        <div is-visible="isLimnic || isTerrestrial">
            <div is-visible="Model.Assessment.NaturalOrigins != null || Model.Assessment.NaturalOrigins.Count != 0">
                <p>@GetLimnicOrTerrestrialExpansion()</p>
                <ul class="expansion-list">
                    @foreach(var origin in Model.Assessment.NaturalOrigins)
                    {
                        <li is-visible="origin.Continent != null">@origin.ClimateZone.DisplayName(): @(origin.Continent.Select(x => x.DisplayName()).JoinAnd(", ", " og "))</li>
                    }
                </ul>
            </div>
            <p is-visible="!string.IsNullOrEmpty(Model.Assessment.NaturalOriginUnknownDocumentation)">@Html.Raw(Model.Assessment.NaturalOriginUnknownDocumentation)</p>
        </div>
        <div is-visible="isMarine">
            <p is-visible="Model.Assessment.NaturalOriginMarine != null && Model.Assessment.NaturalOriginMarine.Count != 0">
                Marin utbredelse: 
                <ul class="expansion-list">
                    @foreach (var existenceArea in Model.Assessment.NaturalOriginMarine.Select(x => x.DisplayName()))
                    {
                        <li is-visible="existenceArea != null">@existenceArea</li>
                    }
                </ul>
            </p>
            <p>@Html.Raw(Model.Assessment.NaturalOriginMarineDetails)</p>
        </div>
        <h4>@Helpers.FixSpeciesLevelWithTranslation("{Artens}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName) nåværende utbredelse</h4>
        <p>Nåværende utbredelse viser @Helpers.FixSpeciesLevelWithTranslation("{artens}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName) totale utbredelse. Det vil si områder der @Helpers.FixSpeciesLevelWithTranslation("{arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName) finnes naturlig (se naturlig utbredelse) og områder som er et resultat av menneskelig forflytning, tilsikta eller utilsikta, av @Helpers.FixSpeciesLevelWithTranslation("{arten}", Model.Assessment.ScientificName.ScientificNameRank, Model.Assessment.ScientificName.ScientificName). </p>
        <div is-visible="isLimnic || isTerrestrial">
            <div is-visible="Model.Assessment.CurrentInternationalExistenceAreas != null || Model.Assessment.CurrentInternationalExistenceAreas.Count != 0">
                <p>@GetLimnicOrTerrestrialExpansion()</p>
                <ul class="expansion-list">
                    @foreach (var existenceArea in Model.Assessment.CurrentInternationalExistenceAreas)
                    {
                        <li is-visible="existenceArea.Continent != null">@existenceArea.ClimateZone.DisplayName(): @(existenceArea.Continent.Select(x => x.DisplayName()).JoinAnd(", ", " og "))</li>
                    }
                </ul>
            </div>
            <p is-visible="!string.IsNullOrEmpty(Model.Assessment.CurrentInternationalExistenceAreasUnknownDocumentation)">@Html.Raw(Model.Assessment.CurrentInternationalExistenceAreasUnknownDocumentation)</p>
        </div>
        <div is-visible="isMarine">
            <p is-visible="Model.Assessment.CurrentInternationalExistenceMarineAreas != null && Model.Assessment.CurrentInternationalExistenceMarineAreas.Count != 0">
                Marin utbredelse: 
                <ul class="expansion-list">
                    @foreach (var existenceArea in Model.Assessment.CurrentInternationalExistenceMarineAreas.Select(x => x.DisplayName()))
                    {
                        <li is-visible="existenceArea != null">@existenceArea</li>
                    }
                </ul>
            </p>
            <p>@Html.Raw(Model.Assessment.CurrentInternationalExistenceMarineAreasDetails)</p>
        </div>
    </div>
    <div is-visible="!isNrButNotAlienSpecie">
        <h3>Reproduksjon og generasjonstid</h3>
        <p>@GetReproductionString()</p>
        <p is-visible="Model.Assessment.GenerationTime != null">Generasjonstid (i år): @Model.Assessment.GenerationTime.</p>
    </div>
</div>
