@model SpeciesAssessment2021
@functions{

    // Snatched and shortened from 2018 nature red list,
    // Not yet ready for use.
    // https://github.com/Artsdatabanken/RodlisteNaturtyper2018visning/blob/2019update/Views/Home/Partials/impact-factors.cshtml

    string ImpactIcon(string id, string subtitle)
    {
        var number = id.Substring(0, 1);
        var biggernumber = id.Substring(0, 3);

        // 0. ingen trussel / no factor  has no image, as it is never displayed.
        if (number == "1")
        {
            // habitat icons are divided further
            number = biggernumber;
        }

        return "https://design.artsdatabanken.no/impact-icons/" + number + ".png";
    }

    string activeOrNot(string element)
    {
        @foreach (var factor in Model.ImpactFactors)
        {
            @if (factor.Id.StartsWith(element))
            {
                return "active";
            }
        }

        return "inactive";
    }

    void iconChooser(string compare)
    {
        @if (@compare == "active")
        {
            <span class="material-icons" style="color:darkgreen">
                done
            </span>
        }
        else if (@compare == "maybe")
        {
            <span class="material-icons">
                pause
            </span>
        }
        else
        {
            <span class="material-icons" style="color:darkred">
                close
            </span>
        }
    }

    void listHeaders(string key,Dictionary<string,object> value)
    {
    <span class="text_container">
        @{iconChooser(activeOrNot(key));}
        <span class="text_collection">
            <span class="impact-id">@key</span>
            @value["title"]
            @foreach (var factor in Model.ImpactFactors)
            {
                @if (factor.Id == (key))
                {
                    <div class="impact_table">
                        <div>
                            <h4>Omfang</h4>
                            <span>@factor.PopulationScope</span>
                        </div>
                        <div class="sideborders">
                            <h4>Alvorlighetsgrad</h4>
                            <span>@factor.Severity</span><br />
                        </div>
                        <div>
                            <h4>Tidspunkt</h4>
                            @factor.TimeScope
                        </div>
                    </div>
                }
            }

        </span>

       
    </span>
    }



}

@{
    Dictionary<string, Dictionary<string, object>> impactfactors_json = ViewBag.impactfactors.ToObject<Dictionary<string, Dictionary<string, object>>>();

}

<div class="page_section impact">
    <h2>Påvirkningsfaktor som vist i JSON -> TIl diskusjon om fremstilling. </h2>
    <p>
        Per nå er det som vises i denne lista slik at hvis et element er aktivt eller har et aktivt barn, åpnes lista på dette punktet.
        Ethvert inaktivt underpunkt lukkes.

    </p>

    <p>
        TODO:<br />
        - ignorer ikon<br />
        - knapp for å vis full liste<br />
        - ikke tabell, hvis alt ukjent, skriv sammen til en streng. Hvis ikke, presenter det likevel som en p.

    </p>
    <button>Se full liste</button>
    <br />
    <div class="outer">
        @foreach (var (key, value) in impactfactors_json)
        {

            <h3 class="@activeOrNot(key)">
                @{listHeaders(key, value);}
            </h3>
            @if (value.ContainsKey("subelement"))
            {
                <ul class="second @activeOrNot(key)">
                    @{
                        var first_layer = Newtonsoft.Json.Linq.JObject.Parse(value["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                    }
                    @foreach (var (first_k, first_v) in first_layer)
                    {
                        <li class="@activeOrNot(first_k)">
                            @{listHeaders(first_k, first_v);}
                            @if (first_v.ContainsKey("subelement"))
                            {
                                <ul class="third">
                                    @{
                                        var second_layer = Newtonsoft.Json.Linq.JObject.Parse(first_v["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                                    }
                                    @foreach (var (second_k, second_v) in second_layer)
                                    {
                                    <li class="@activeOrNot(second_k)">
                                        @{listHeaders(second_k, second_v);}

                                        @if (second_v.ContainsKey("subelement"))
                                        {
                                            <ul class="fourth">
                                                @{
                                                    var third_layer = Newtonsoft.Json.Linq.JObject.Parse(second_v["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                                                }
                                                @foreach (var (third_k, third_v) in third_layer)
                                                {
                                                    <li class="@activeOrNot(third_k)">
                                                       @{listHeaders(third_k, third_v);}
                                                        @if (third_v.ContainsKey("subelement"))
                                                        {
                                                            <ul class="fifth">
                                                                @{
                                                                    var fourth_layer = Newtonsoft.Json.Linq.JObject.Parse(third_v["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                                                                }
                                                                @foreach (var (fourth_k, fourth_v) in fourth_layer)
                                                                {
                                                                    <li class="@activeOrNot(fourth_k)">
                                                                         @{listHeaders(fourth_k, fourth_v);}
                                                                    </li>
                                                                }
                                                            </ul>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                    }
                                </ul>
                            }
                        </li>
                    }
                </ul>
            }
        }
    </div>

</div>

