
@model SpeciesAssessment2021
@*


*@

@{

    Dictionary<string, Dictionary<string, object>> criteria = ViewBag.kriterier.ToObject<Dictionary<string, Dictionary<string, object>>>();


    string a = "";
    string b = "";
    string c = "";
    string d = "";
    string e = "";



    void placeCriteria(string criteria)
    {

        if (criteria.Contains("A"))
        {
            a = criteria;
        }
        else if (criteria.Contains("B"))
        {
            b = criteria;
        }
        else if (criteria.Contains("C"))
        {
            c = criteria;
        }
        else if (criteria.Contains("D"))
        {
            d = criteria;
        }
        else if (criteria.Contains("E"))
        {
            e = criteria;
        }

    }


    if (@Model.CriteriaSummarized.Contains(";"))
    {
        // SPLIT THE LIST AND LOOP THEM
        foreach (string crit in @Model.CriteriaSummarized.Split(";"))
        {
            placeCriteria(crit);
        }
    }
    else
    {
        placeCriteria(@Model.CriteriaSummarized);
    }


    string subCriteria(string element, string bigstring)
    {
        return bigstring.Replace("+", "," + element);
    }




    // A CRITERIA:
    // OPTIONS AND SUBCRITERIA ARE SEPARATE ENTITIES

    string a_subcriteria = "";
    string a_options = "";

    a = subCriteria("A", a);
    a = a.Replace("(", ",(");
    var distinctlist = a.Split(",").Distinct();
    a = string.Join(",", distinctlist);

    // STUPID WAY TO DO IT BUT ITS LATE IN THE DAY.

    if (a.Contains("("))
    {
        a_subcriteria = a.Split(",(")[0];
        a_options = a.Split(",(")[1];
        a_subcriteria += a_options.Split(")")[1];
        a_options = a_options.Split(")")[0];
        a = a_subcriteria + "," + a_options;

    }


    // B CRITERIA

    // OPTIONS AND SUBCRITERIA ARE SEPARATE ENTITIES

    string b_subcriteria = "";
    string b_options = "";

    b = subCriteria("B", b);
    if (b.Contains("B1"))
    {
        b_subcriteria += "B1,";
        b = b.Replace("B1", "");
    }
    if (b.Contains("B2"))
    {
        b_subcriteria += "B2";
        b = b.Replace("B2", "");
    }

    b = b.Replace("b", ",b");
    b = b.Replace("c", ",c");
    var b_distinctlist = b.Split(",").Distinct();
    b_options = string.Join(",", b_distinctlist);
    b = b_subcriteria + "," + b_options;



    // C CRITERIA:
    c = subCriteria("C", c);



    // D CRITERIA:
    // NO OPTIONS ONLY SUBCRITERIA

    d = subCriteria("D", d);


    // E CRITERIA:
    // Actually never in use, so no need to worry bout this one


    var subcriteria = new Dictionary<string, string>(){
    {"A", a_subcriteria},
    {"B", b_subcriteria},
    {"C", c},
    {"D", d},
    {"E", e},
    };


    var options = new Dictionary<string, string>(){
    {"A", a_options},
    {"B", b_options},
    };



    string inString(string element, string bigstring)
    {
        if (bigstring.Contains(element))
        {
            return "active";
        }
        return "inactive";
    }
}



<div class="page_section criteria">

    <h2>Hvilke kriterier gjør at denne arten er rødlistet?</h2>
    <p> En fin plass å oppsummere bittelitt om kriteriene, og si en slags introsetning. </p>
    <div class="page_section">
        <p>@Model.CriteriaSummarized<br /></p>

        A: @a <br />
        B: @b<br />
        C: @c <br />
        D: @d <br />
        E: @e <br />
    </div>

    @foreach (var (key, value) in criteria)
    {


        <div class="criteria_element @inString(key, @Model.CriteriaSummarized)">

            <h3>@key -  @value["title"]</h3>

            <p class="criteria_description">
                @value["description"]
            </p>




            @if (@value.ContainsKey("subcriteria"))
            {
                <div class="criteria_subcriteria">
                    @{
                        var newDictionary2 = Newtonsoft.Json.Linq.JObject.Parse(value["subcriteria"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                    }
                    @foreach (var (k, v) in newDictionary2)
                    {

                        <div class="optionselement @inString(k, subcriteria[key])">
                            <h5>@k <span>@v["title"]</span></h5><br />
                            @if (v.ContainsKey("description"))
                            {
                                <p>@v["description"]</p>
                            }
                        </div>
                    }
                </div>
            }

            @if (@value.ContainsKey("options"))
            {
                <div class="criteria_options">
                    @{
                        var newDictionary = Newtonsoft.Json.Linq.JObject.Parse(value["options"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                    }
                    <h4> Underkriterier </h4>
                    <p>

                        @foreach (var (k, v) in newDictionary)
                        {

                            <div class="optionselement @inString(k, options[key])">
                                <h5>@k) <span>@v["title"]</span></h5><br />
                            </div>
                        }
                    </p>
                </div>
            }
        </div>


    }


</div>