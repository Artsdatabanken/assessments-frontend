@model CriteriaExplanationViewModel
@using Assessments.Mapping.AlienSpecies.Model.Enums

@{
    var isDecisiveCriteria = Model.Criteria == Model.AlienSpeciesDetailViewModel.Assessment.DecisiveCriteria;
    // We need to know which criteria are not used, but still has uncertainty, and who does not have uncertainty or is used at all. 
    var unusedCriteriaWithoutUncertainty = new string(Model.Criteria.Where(x => Model.AlienSpeciesDetailViewModel.Assessment.Criteria.Any(y => y.CriteriaLetter.ToString() == x.ToString() && y.UncertaintyValues.Count() == 1)).ToArray());

    var assessment = Model.AlienSpeciesDetailViewModel.Assessment;
    var isNrOrEvaluatedAtAnotherLevel = assessment.Category == AlienSpeciesAssessment2023Category.NR || assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.TaxonEvaluatedAtAnotherLevel;
    var showIsNk = assessment.Category == AlienSpeciesAssessment2023Category.NK;
    var showLowInvasionPotential = assessment.ScoreInvasionPotential == AlienSpeciesAssessment2023MatrixAxisScore.InvasionPotential.Small;
    var showHigherInvasionPotential = assessment.ScoreInvasionPotential != AlienSpeciesAssessment2023MatrixAxisScore.InvasionPotential.Small && assessment.ScoreInvasionPotential != AlienSpeciesAssessment2023MatrixAxisScore.InvasionPotential.Unknown;

    var uncertaintyA = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.A).FirstOrDefault();
    var uncertaintyB = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.B).FirstOrDefault();
    var uncertaintyC = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.C).FirstOrDefault();
    var uncertaintyD = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.D).FirstOrDefault();
    var uncertaintyE = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.E).FirstOrDefault();
    var uncertaintyF = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.F).FirstOrDefault();
    var uncertaintyG = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.G).FirstOrDefault();
    var uncertaintyH = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.H).FirstOrDefault();
    var uncertaintyI = assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.I).FirstOrDefault();

    var isSimplifiedEstimation = assessment.MedianLifetimeEstimationMethod == AlienSpeciesAssessment2023MedianLifetimeEstimationMethod.SimplifiedEstimation;
    var isAcceptedSimplifiedEstimation = assessment.IsAcceptedSimplifiedEstimate == true;
    var isAlien = assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.AlienSpecie || assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.RegionallyAlien;
    var isDoorknockerOrEffectWithoutReproduction = assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.DoorKnocker || assessment.AlienSpeciesCategory == AlienSpeciecAssessment2023AlienSpeciesCategory.EffectWithoutReproduction;

    var showSimplifiedEstimateAcceptedAlien = isSimplifiedEstimation && isAcceptedSimplifiedEstimation && isAlien;
    var showSimplifiedEstimateNotAcceptedAlien = isSimplifiedEstimation && !isAcceptedSimplifiedEstimation && isAlien;
    var showSimplifiedEstimateAcceptedDoorKnockerOrEffectWithoutReproduction = isSimplifiedEstimation && isAcceptedSimplifiedEstimation && isDoorknockerOrEffectWithoutReproduction;
    var showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction = isSimplifiedEstimation && !isAcceptedSimplifiedEstimation && isDoorknockerOrEffectWithoutReproduction;

    var showNumericalEstimation = assessment.MedianLifetimeEstimationMethod == AlienSpeciesAssessment2023MedianLifetimeEstimationMethod.NumericalEstimation;
    var showViableAnalysis = assessment.MedianLifetimeEstimationMethod == AlienSpeciesAssessment2023MedianLifetimeEstimationMethod.ViableAnalysis;

    var isSpatiotemporalDataset = assessment.ExpansionSpeedEstimationMethod == AlienSpeciesAssessment2023ExpansionSpeedEstimationMethod.SpatioTemporalDataset;
    var isEstimatedIncreaseInAOOReproducingUnaided = assessment.ExpansionSpeedEstimationMethod == AlienSpeciesAssessment2023ExpansionSpeedEstimationMethod.EstimatedIncreaseInAOOReproducingUnaided;
    var isEstimatedIncreaseInAOOReproducingUnaidedFutureExpansion = assessment.ExpansionSpeedEstimationMethod == AlienSpeciesAssessment2023ExpansionSpeedEstimationMethod.EstimatedIncreaseInAOOReproducingUnaidedFutureExpansion;
    var isEstimatedIncreaseInAOODoorKnockers = assessment.ExpansionSpeedEstimationMethod == AlienSpeciesAssessment2023ExpansionSpeedEstimationMethod.EstimatedIncreaseInAOODoorKnockers;

    var showNoEcologicalEffect = assessment.ScoreEcologicalEffect == AlienSpeciesAssessment2023MatrixAxisScore.EcologicalEffect.NotKnown && !Model.Criteria.Any(x => Model.AlienSpeciesDetailViewModel.Assessment.Criteria.Any(y => y.CriteriaLetter.ToString() == x.ToString() && y.UncertaintyValues.Count() > 1));

    var showFTable = assessment.ImpactedNatureTypes.Any(x => x.IsThreatened == true && HasAffectedArea(x.AffectedArea));
    var showGTable = assessment.ImpactedNatureTypes.Any(x => x.IsThreatened == false && HasAffectedArea(x.AffectedArea));
    var showHTable = assessment.GeneticContamination != null && assessment.GeneticContamination.Count() != 0;
    var showITable = assessment.ParasitePathogenTransmission != null && assessment.ParasitePathogenTransmission.Count() != 0;
    var showGeneticContaminationUncertaintyDocumentation = !string.IsNullOrEmpty(assessment.GeneticContaminationUncertaintyDocumentation) && assessment.Criteria.Any(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.H && x.UncertaintyValues.Count() > 1);
    var showParasitePathogenTransmissionUncertaintyDocumentation = !string.IsNullOrEmpty(assessment.ParasitePathogenTransmissionUncertaintyDocumentation) && assessment.Criteria.Any(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.I && x.UncertaintyValues.Count() > 1);

    // needed to check if a criteria has content, for deciding if it should be shown in nonDecisiveCriteria tab
    var hasContentA = showSimplifiedEstimateAcceptedAlien || showSimplifiedEstimateNotAcceptedAlien || showSimplifiedEstimateAcceptedDoorKnockerOrEffectWithoutReproduction || showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction || showNumericalEstimation || showViableAnalysis;
    var hasContentB = isSpatiotemporalDataset || isEstimatedIncreaseInAOOReproducingUnaided || isEstimatedIncreaseInAOOReproducingUnaidedFutureExpansion || isEstimatedIncreaseInAOODoorKnockers;
    var hasContentC = assessment.ImpactedNatureTypes != null && assessment.ImpactedNatureTypes.Count != 0 && assessment.ImpactedNatureTypes.Any(x => x.ColonizedArea != "0.0");
    var hasContentD = (assessment.SpeciesSpeciesInteractionsThreatenedSpecies != null && assessment.SpeciesSpeciesInteractionsThreatenedSpecies.Count() != 0) || (assessment.SpeciesNaturetypeInteractionsThreatenedSpecies != null && assessment.SpeciesNaturetypeInteractionsThreatenedSpecies.Count() != 0) || (!string.IsNullOrEmpty(assessment.EffectsOnThreathenedSpeciesUncertaintyDocumentation) && HasUncertainty(uncertaintyD));
    var hasContentE = (assessment.SpeciesSpeciesInteractions != null && assessment.SpeciesSpeciesInteractions.Count() != 0) || (assessment.SpeciesNaturetypeInteractions != null && assessment.SpeciesNaturetypeInteractions.Count() != 0) || (!string.IsNullOrEmpty(assessment.EffectsOnOtherNativeSpeciesUncertaintyDocumentation) && HasUncertainty(uncertaintyE));
    var hasContentF = showFTable || !string.IsNullOrEmpty(assessment.ThreatenedNatureTypesAffectedDomesticDescription);
    var hasContentG = showGTable || !string.IsNullOrEmpty(assessment.CommonNatureTypesAffectedDomesticDescription);
    var hasContentH = showHTable || showGeneticContaminationUncertaintyDocumentation;
    var hasContentI = showITable || showParasitePathogenTransmissionUncertaintyDocumentation;

    // If decisive criteria pane, show if decisive. If not decisive criteria pane, show if criteria is used, or if it has uncertainty.
    var criteriaHasA = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.A))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.A)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.A)) || hasContentA));
    var criteriaHasB = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.B))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.B)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.B)) || hasContentB));
    var criteriaHasC = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.C))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.C)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.C)) || hasContentC));
    var criteriaHasD = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.D))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.D)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.D)) || hasContentD));
    var criteriaHasE = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.E))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.E)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.E)) || hasContentE));
    var criteriaHasF = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.F))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.F)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.F)) || hasContentF));
    var criteriaHasG = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.G))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.G)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.G)) || hasContentG));
    var criteriaHasH = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.H))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.H)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.H)) || hasContentH));
    var criteriaHasI = (isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.I))) || (!isDecisiveCriteria && Model.Criteria.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.I)) && (!unusedCriteriaWithoutUncertainty.Contains(nameof(AlienSpeciesAssessment2023CriteriaLetter.I)) || hasContentI));

    string UnusedCriteriaInvationPotential()
    {
        var notUsed = string.Empty;
        notUsed += hasContentA ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.A);
        notUsed += hasContentB ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.B);
        notUsed += hasContentC ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.C);

        if (notUsed.Length > 1)
        {
            notUsed = String.Join(", ", notUsed.ToArray());
        }
        return notUsed;
    } 

    string UnusedCriteriaEcologicalEffect()
    {
        var notUsed = string.Empty;;
        notUsed += hasContentD ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.D);
        notUsed += hasContentE ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.E);
        notUsed += hasContentF ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.F);
        notUsed += hasContentG ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.G);
        notUsed += hasContentH ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.H);
        notUsed += hasContentI ? string.Empty : nameof(AlienSpeciesAssessment2023CriteriaLetter.I);

        if (notUsed.Length > 1)
        {
            notUsed = String.Join(", ", notUsed.ToArray());
        }
        return notUsed;
    }

    bool HasUncertainty(AlienSpeciesAssessment2023Criterion uncertainty)
    {
        return AlienSpeciesHelpers.GetUncertaintyLow(uncertainty) != 0 || AlienSpeciesHelpers.GetUncertaintyHigh(uncertainty) != 0;
    }

    bool HasAffectedArea(string affectedArea)
    {
        float area;
        if (float.TryParse(affectedArea, out area))
        {
            return area != (float)0;
        }
        return true;
    }

    void GetSpeciesTableDesktop(List<AlienSpeciesAssessment2023SpeciesSpeciesInteraction> impacts)
    {
        <table class="numbers-table">
            <caption class="table-title">Artens negative effekter på øvrige stedegne arter</caption>
            <tr>
                <td><b>Stedegen art</b></td>
                <td><b>Kategori i Rødlista 2021</b></td>
                <td><b>Er arten en nøkkelart?</b></td>
                <td><b>Interaksjonens styrke</b></td>
                <td><b>Geografisk omfang</b></td>
                <td><b>Type interaksjon</b></td>
                @if (impacts.Any(x => x.Background.Count() != 0))
                {
                    <td><b>Vurderingsgrunnlag</b></td>
                }
            </tr>
            @foreach (var impact in impacts)
            {
                <tr>
                    <td>@impact.VernacularName <br> @Html.Raw(Helpers.FormatScientificNameElement(impact.ScientificName)) @impact.ScientificNameAuthor</td>
                    <td>@impact.RedListCategory - @impact.RedListCategory.DisplayName()</td>
                    <td>@(impact.KeyStoneSpecie ? "ja" : "nei")</td>
                    <td>@impact.InteractionStrength.DisplayName()</td>
                    <td>@impact.Scale.DisplayName()</td>
                    <td>@impact.InteractionType.DisplayName()</td>
                    @if (@impact.Background.Count() != 0)
                    {
                        <td>
                            <ul>
                                @foreach (var background in impact.Background)
                                {
                                    <li>@background.DisplayName()</li>
                                }
                            </ul>
                        </td>
                    }
                </tr>
            }
        </table>
    }

    void GetSpeciesTablesMobile(List<AlienSpeciesAssessment2023SpeciesSpeciesInteraction> impacts)
    {
        @foreach (var impact in impacts)
        {
            <table class="numbers-table">
                <caption class="table-title">Stedegen art: @impact.VernacularName @Html.Raw(Helpers.FormatScientificNameElement(impact.ScientificName)) @impact.ScientificNameAuthor</caption>
                <tr>
                    <td>kategori i Rødlista 2021</td>
                    <td>@impact.RedListCategory - @impact.RedListCategory.DisplayName()</td>
                </tr>
                <tr>
                    <td>er arten en nøkkelart?</td>
                    <td>@(impact.KeyStoneSpecie ? "ja" : "nei")</td>
                </tr>
                <tr>
                    <td>interaksjonens styrke</td>
                    <td>@impact.InteractionStrength.DisplayName()</td>
                </tr>
                <tr>
                    <td>geografisk omfang</td>
                    <td>@impact.Scale.DisplayName()</td>
                </tr>
                <tr>
                    <td>type interaksjon</td>
                    <td>@impact.InteractionType.DisplayName()</td>
                </tr>
                @if (@impact.Background.Count() != 0)
                {
                    <tr>
                        <td>vurderingsgrunnlag</td>
                        <td>
                            <ul>
                                @foreach (var background in impact.Background)
                                {
                                    <li>@background.DisplayName()</li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </table>
        }
    }

    void GetNatureTypeTableDesktop(List<AlienSpeciesAssessment2023SpeciesNaturetypeInteraction> impacts)
    {
        <table class="numbers-table">
            <caption class="table-title">Artens negative effekter på grupper av arter (samfunn)</caption>
            <tr>
                <td><b>Berørt naturtype (med gruppen av påvirkede arter)</b></td>
                <td><b>Påvirkes nøkkelarter eller truede arter?</b></td>
                <td><b>Interaksjonens styrke</b></td>
                <td><b>Geografisk omfang</b></td>
                <td><b>Type interaksjon</b></td>
                <td><b>Vurderingsgrunnlag</b></td>
            </tr>
            @foreach (var impact in impacts)
            {
                <tr>
                    <td>@impact.Name</td>
                    <td>@(impact.KeyStoneSpecie ? "ja" : "nei")</td>
                    <td>@impact.InteractionStrength.DisplayName()</td>
                    <td>@impact.Scale.DisplayName()</td>
                    <td>@impact.InteractionType.DisplayName()</td>
                    <td>
                        <ul>
                            @foreach (var background in impact.Background)
                            {
                                <li>@background.DisplayName()</li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </table>
    }

    void GetNatureNypeTablesMobile(List<AlienSpeciesAssessment2023SpeciesNaturetypeInteraction> impacts)
    {
        foreach (var impact in impacts)
        {
            <table class="numbers-table">
                <caption class="table-title">Berørt naturtype (med gruppen av påvirkede arter): @impact.Name</caption>
                <tr>
                    <td>påvirkes nøkkelarter eller truede arter?</td>
                    <td>@(impact.KeyStoneSpecie ? "ja" : "nei")</td>
                </tr>
                <tr>
                    <td>interaksjonens styrke</td>
                    <td>@impact.InteractionStrength.DisplayName()</td>
                </tr>
                <tr>
                    <td>geografisk omfang</td>
                    <td>@impact.Scale.DisplayName()</td>
                </tr>
                <tr>
                    <td>type interaksjon</td>
                    <td>@impact.InteractionType.DisplayName()</td>
                </tr>
                @if (@impact.Background.Count() != 0)
                {
                    <tr>
                        <td>vurderingsgrunnlag</td>
                        <td>
                            <ul>
                                @foreach (var background in impact.Background)
                                {
                                    <li>@background.DisplayName()</li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </table>
        }
    }

    void GetFGTable(bool shouldBeThreatened)
    {
        <table class="numbers-table">
            <caption class="table-title">Naturtyper som påvirkes av arten</caption>
            <tr>
                <td><b>Naturtype</b></td>
                <td><b>Tidshorisont</b></td>
                <td><b>Tydelig tilstandsendring</b></td>
                <td><b>Tydelig påvirka areal (%)</b></td>
                <td><b>Vurderingsgrunnlag</b></td>
            </tr>
            @foreach (var natureType in assessment.ImpactedNatureTypes.Where(x => x.IsThreatened == shouldBeThreatened && HasAffectedArea(x.AffectedArea)))
            {
                <tr>
                    <td>@natureType.Name</td>
                    <td>@natureType.TimeHorizon.DisplayName()</td>
                    <td>
                        @if (natureType.StateChange != null)
                        {
                            <ul>
                                @foreach (var stateChange in natureType.StateChange)
                                {
                                    <li>
                                        @stateChange.DisplayName()
                                    </li>
                                }
                            </ul>
                        }
                    </td>
                    <td>@natureType.AffectedArea</td>
                    <td>
                    @{
                            <ul>
                                @foreach (var background in natureType.Background)
                                {
                                    <li>
                                        @background.DisplayName()
                                    </li>
                                }
                            </ul>
                    }
                    </td>
                </tr>
            }
        </table>
    }

    void GetListForCategory(AlienSpeciesAssessment2023Criterion criterion, string letter)
    {
        <div class="collapsible_header">
            <span>
                <b><span class="collapsible_header_letter">@letter.</span></b> @criterion.CriteriaLetter.DisplayName() 
                <span> @AlienSpeciesHelpers.GetLetterFullText(criterion, false) @Constants.ScoreExplanationScore @criterion.Value.</span>
            </span> 
            <button onclick="toggleCollapsible(this)">
                <span class="expanded_icon">
                    <span>Se mindre</span>
                    <span class="material-icons">expand_less</span>
                </span>
                <span class="collapsed_icon">
                    <span>Se mer</span>
                    <span class="material-icons">expand_more</span>
                </span>
            </button>
        </div>
    }

    void GetEstimationMethod(string estimationMethod)
    {
        <span class="estimation-method">
            <b>@Constants.estimationMethod</b><br/>
            <span>@estimationMethod</span>
        </span>
    }
}

<div is-visible="showIsNk && isDecisiveCriteria">
    @Constants.speciesEvaluatedTo  <i>@Constants.noRisk</i> @Constants.noRiskExplanation
</div>

<div is-visible="!showIsNk || !isDecisiveCriteria">
    <p>
       @Constants.criteriaScoresAt 
        <a href="https://artsdatabanken.no/Pages/339785/Risikokategorier_og_kriterier">
            @Constants.readMoreAboutCriterias
            @{
                /*TODO: add link when there is one*/
            }
        </a>
    </p>
    <h3>@Constants.xAxisLabel</h3>
    <p>@Constants.xAxisExplanation</p>
    
    <p is-visible="isDecisiveCriteria">
        <b>@Constants.speciesHas @assessment.ScoreInvasionPotential.DisplayName().ToLowerInvariant() 
            @Constants.xAxisLabel.ToLower() (@Constants.JustScore @((int)assessment.ScoreInvasionPotential))
        </b>
    </p>

    <b is-visible="isDecisiveCriteria">@Constants.determeningCriteriaHeading</b>
    <b is-visible="!isDecisiveCriteria">@Constants.otherCriteriaHeading</b>
    <p is-visible="showLowInvasionPotential && isDecisiveCriteria">
         @Constants.noDecisiveCriteriaXAxis
        <span>@Constants.seeOtherTab</span>
    </p>
    <ul class="criteria-summary-list">
        <li is-visible="criteriaHasA || criteriaHasB"  class="collapsible initially_closed">
            @{
                GetListForCategory(uncertaintyA, AlienSpeciesAssessment2023CriteriaLetter.A.ToString());
            }
            <div class="collapsible_content">                
                @{GetEstimationMethod(assessment.MedianLifetimeEstimationMethod.DisplayName().ToLowerInvariant());}                
                <p class="summary-estimated">
                    <span is-visible="showSimplifiedEstimateAcceptedAlien || showSimplifiedEstimateNotAcceptedAlien">
                        @Constants.basedOnEstimatesPlural @Constants.basedOnArea @Constants.today
                        (@assessment.AOOtotalBest?.ToString("N0") km²) @Constants.andIn50 
                        (@assessment.AOOfutureBest.ToString("N0") km²)     
                    </span>
                    
                    <span is-visible="showSimplifiedEstimateAcceptedDoorKnockerOrEffectWithoutReproduction || showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction">
                        @Constants.basedOnEstimatesSingular
                        @assessment.RiskAssessmentOccurrences1Best?.ToString("N0")
                        @Constants.basedOnArea10years @Constants.and
                        @assessment.RiskAssessmentIntroductionsBest?.ToString("N0")
                        @Constants.moreIntroductions                       
                    </span>

                    <span is-visible="showSimplifiedEstimateNotAcceptedAlien || showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction">
                        @Constants.aCriteriaPreScoredAs 
                        @assessment.MedianLifetimeSimplifiedEstimationDefaultScore.ToString("N0")
                        (@Constants.withUuncertainty
                        @assessment.MedianLifetimeSimplifiedEstimationDefaultScoreLow.ToString("N0")
                        – 
                        @assessment.MedianLifetimeSimplifiedEstimationDefaultScoreHigh.ToString("N0")). 
                        @Constants.adjustedTo @uncertaintyA.Value @Constants.and 
                    </span>

                    <span is-visible="showSimplifiedEstimateAcceptedAlien || showSimplifiedEstimateAcceptedDoorKnockerOrEffectWithoutReproduction">
                        @Constants.aCriteriaScoredAs @uncertaintyA.Value (@Constants.withUuncertainty: 
                    </span>
                    
                    <span class="uncertainty-range" is-visible="showSimplifiedEstimateAcceptedAlien || showSimplifiedEstimateNotAcceptedAlien || showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction || showSimplifiedEstimateAcceptedDoorKnockerOrEffectWithoutReproduction">
                        @AlienSpeciesHelpers.GetUncertaintyValueMinMax(uncertaintyA.Value, AlienSpeciesHelpers.GetUncertaintyLow(uncertaintyA))
                        – 
                        @AlienSpeciesHelpers.GetUncertaintyValueMinMax(uncertaintyA.Value, AlienSpeciesHelpers.GetUncertaintyHigh(uncertaintyA))). 
                    </span>

                    <span class="lifeSpan" is-visible="showSimplifiedEstimateAcceptedAlien || showSimplifiedEstimateNotAcceptedAlien || showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction || showSimplifiedEstimateAcceptedDoorKnockerOrEffectWithoutReproduction">
                        @Constants.medianLifeSpan
                        @AlienSpeciesHelpers.CriteriaDescription(uncertaintyA.CriteriaLetter, uncertaintyA.Value)                    
                        @Constants.riskOfDeath50
                        @assessment.ExtinctionProbability.DisplayName().
                    </span>
                </p>
                <p class="adjusted-explanation" is-visible="showSimplifiedEstimateNotAcceptedAlien || showSimplifiedEstimateNotAcceptedDoorKnockerOrEffectWithoutReproduction">
                    @Constants.adjustedUncertainty
                    @assessment.MedianLifetimeSimplifiedEstimationAdjustScoreReason
                </p>                                
                <div is-visible="showNumericalEstimation">
                    <table class="numbers-table" is-visible="showNumericalEstimation">
                        <caption class="table-title"><b>@Constants.demoKeyNumbers</b></caption>
                        <tr is-visible="assessment.MedianLifetimeNumericalEstimationPopulationSize != 0">
                            <td>@Constants.currentPopSize </td>
                            <td>@assessment.MedianLifetimeNumericalEstimationPopulationSize.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeNumericalEstimationGrowthRate != 0">
                            <td>@Constants.growthRate (&lambda;): </td>
                            <td>@assessment.MedianLifetimeNumericalEstimationGrowthRate.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeNumericalEstimationEnvironmentalVariance != null">
                            <td>@Constants.environmentVar (&sigma;<sub>e</sub><sup>2</sup>): </td>
                            <td>@assessment.MedianLifetimeNumericalEstimationEnvironmentalVariance?.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeNumericalEstimationDemographicVariance != null">
                            <td>@Constants.demographicVar (&sigma;<sub>d</sub><sup>2</sup>): </td>
                            <td>@assessment.MedianLifetimeNumericalEstimationDemographicVariance?.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeNumericalEstimationCarryingCapacity != null">
                            <td>@Constants.sustainability</td>
                            <td>@assessment.MedianLifetimeNumericalEstimationCarryingCapacity?.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeNumericalEstimationExtinctionThreshold != null">
                            <td>@Constants.extinctLimit</td>
                            <td>@assessment.MedianLifetimeNumericalEstimationExtinctionThreshold?.ToString("N0")</td>
                        </tr>
                    </table>
                    <p is-visible="assessment.MedianLifetimeBestEstimate != 0">
                        @Constants.medianLifeEst
                        @assessment.MedianLifetimeBestEstimate.ToString("N0") @Constants.years.
                    </p>
                </div>
                <div is-visible="showViableAnalysis">
                    <p>@Constants.modelAndProgram @assessment.MedianLifetimeViabilityAnalysisDescription</p>
                    <table class="numbers-table">
                        <caption class="table-title">@Constants.demoKeyNumbers</caption>
                        <tr is-visible="assessment.MedianLifetimeBestEstimate != 0">
                            <td>@Constants.estMedianLifeSpanThisYear: </td>
                            <td>@assessment.MedianLifetimeBestEstimate.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeLowEstimate != 0">
                            <td>@Constants.estMedianLifeSpanThisYear @Constants.lowEstimate: </td>
                            <td>@assessment.MedianLifetimeLowEstimate.ToString("N0")</td>
                        </tr>
                        <tr is-visible="assessment.MedianLifetimeHighEstimate != 0">
                            <td>@Constants.estMedianLifeSpanThisYear @Constants.highEstimate: </td>
                            <td>@assessment.MedianLifetimeHighEstimate.ToString("N0")</td>
                        </tr>
                    </table>
                </div>
            </div>            
        </li>
        <li is-visible="criteriaHasA || criteriaHasB" class="collapsible initially_closed">            
            @{
                GetListForCategory(uncertaintyB, AlienSpeciesAssessment2023CriteriaLetter.B.ToString());
            }
            <div class="collapsible_content">
                @{GetEstimationMethod(assessment.ExpansionSpeedEstimationMethod.DisplayName().ToLowerInvariant());}
                <div is-visible="isSpatiotemporalDataset">
                    <table class="numbers-table">
                        <caption class="table-title">
                            @Constants.spatioTemporalTableTitle                            
                            (@Constants.readMoreMethod: <a href="https://view.nina.no/expansion/" target="_blank">@Constants.expansion</a>)
                        </caption>
                        <tr is-visible="!string.IsNullOrEmpty(assessment.ExpansionSpeedSpatioTemporalDatasetDarkFigureRange)">
                            <td>@Constants.areaDarkNumbers: </td>
                            <td>@assessment.ExpansionSpeedSpatioTemporalDatasetDarkFigureRange</td>
                        </tr>
                        <tr is-visible="!string.IsNullOrEmpty(assessment.ExpansionSpeedSpatioTemporalDatasetModel.DisplayName())">
                            <td>@Constants.model: </td>
                            <td>@assessment.ExpansionSpeedSpatioTemporalDatasetModel.DisplayName()</td>
                        </tr>
                        <tr is-visible="!string.IsNullOrEmpty(assessment.ExpansionSpeedSpatioTemporalDatasetOccurrenceListing.DisplayName())">
                            <td>@Constants.sitesListed: </td>
                            <td>@assessment.ExpansionSpeedSpatioTemporalDatasetOccurrenceListing.DisplayName()</td>
                        </tr>
                    </table>
                    <br />
                    <table class="numbers-table">
                        <caption class="table-title">@Constants.expansionSpeed</caption>
                        <tr>
                            <td>@Constants.average: </td>
                            <td>@assessment.ExpansionSpeedBestEstimate.ToString("N0")</td>
                        </tr>
                        <tr>
                            <td>@Constants.average @Constants.lowEstimate: </td>
                            <td>@assessment.ExpansionSpeedLowEstimate.ToString("N0")</td>
                        </tr>
                        <tr>
                            <td>@Constants.average @Constants.highEstimate: </td>
                            <td>@assessment.ExpansionSpeedHighEstimate.ToString("N0")</td>
                        </tr>
                    </table>
                </div>
                <div is-visible="isEstimatedIncreaseInAOOReproducingUnaided">
                    <p>@Constants.methodDescriptionReproducingUnaided</p>
                    <table class="numbers-table">
                        <tr>
                            <td>@Constants.yearCaps</td>
                            <td>@Constants.knownArea (km<sup>2</sup>)</td>
                            <td>@Constants.knownArea (km<sup>2</sup>) @Constants.corrected</td>
                        </tr>
                        <tr>
                            <td>@assessment.ExpansionSpeedEstimatedIncreaseInAOOFirstYear</td>
                            <td>@assessment.ExpansionSpeedEstimatedIncreaseInAOOFirstAOO.ToString("N0")</td>
                            <td>@assessment.ExpansionSpeedEstimatedIncreaseInAOOFirstAOOCorr.ToString("N0")</td>
                        </tr>
                        <tr>
                            <td>@assessment.ExpansionSpeedEstimatedIncreaseInAOOLastYear</td>
                            <td>@assessment.ExpansionSpeedEstimatedIncreaseInAOOLastAOO.ToString("N0")</td>
                            <td>@assessment.ExpansionSpeedEstimatedIncreaseInAOOLastAOOCorr.ToString("N0")</td>
                        </tr>
                    </table>
                    <p is-visible="!string.IsNullOrEmpty(assessment.ExpansionSpeedEstimatedIncreaseInAOODescription)">
                        @Constants.commentData @assessment.ExpansionSpeedEstimatedIncreaseInAOODescription
                    </p>
                    <p>
                        @Constants.basedOnIncrease @assessment.ExpansionSpeedEstimatedIncreaseInAOOFirstYear @Constants.to 
                        @assessment.ExpansionSpeedEstimatedIncreaseInAOOLastYear
                        @Constants.andA @Constants.darkNumber @((assessment.AOOtotalBest / assessment.AOOknown)?.ToString("N0"))
                        @Constants.expansionSpeedEst @assessment.ExpansionSpeedBestEstimate.ToString("N0") @Constants.mPerYear. 
                        @Constants.withUuncertainty @assessment.ExpansionSpeedLowEstimate.ToString("N0") @Constants.mPerYear 
                        (@Constants.darkNumber @((assessment.AOOtotalLow / assessment.AOOknown)?.ToString("N0"))) – 
                        @assessment.ExpansionSpeedHighEstimate.ToString("N0") @Constants.mPerYear 
                        (@Constants.darkNumber @((assessment.AOOtotalHigh / assessment.AOOknown)?.ToString("N0"))).
                    </p>
                </div>
                <div is-visible="isEstimatedIncreaseInAOOReproducingUnaidedFutureExpansion">
                    <p>@Constants.methodDescriptionUnaidedFuture</p>
                    <p>
                        @Constants.basedOnEstimatesSingular @Constants.basedOnAreaSingular @Constants.today 
                        (@assessment.AOOtotalBest?.ToString("N0") km<sup>2</sup>) @Constants.andIn50
                        (@assessment.AOOfutureBest.ToString("N0") km<sup>2</sup>)  @Constants.expansionSpeedIs
                        @assessment.ExpansionSpeedBestEstimate.ToString("N0") @Constants.mPerYear. 
                        @Constants.isScore @uncertaintyB.Value @Constants.atBCrit.
                    </p>
                </div>
                <p is-visible="isEstimatedIncreaseInAOODoorKnockers">                   
                    @Constants.basedOnEstimatesSingular  @assessment.RiskAssessmentOccurrences1Best?.ToString("N0") 
                    @Constants.basedOnArea10years @Constants.and @assessment.RiskAssessmentIntroductionsBest?.ToString("N0") 
                    @Constants.moreIntroductions @Constants.bCriteriaScoredAs @uncertaintyB.Value (@Constants.withUuncertainty
                    @AlienSpeciesHelpers.GetUncertaintyValueMinMax(uncertaintyB.Value, AlienSpeciesHelpers.GetUncertaintyLow(uncertaintyB))
                    – 
                    @AlienSpeciesHelpers.GetUncertaintyValueMinMax(uncertaintyB.Value, AlienSpeciesHelpers.GetUncertaintyHigh(uncertaintyB))). 
                    @Constants.expansionSpeedGuess @assessment.ExpansionSpeedBestEstimate.ToString("N0") @Constants.mPerYear.                   
                </p>
            </div>            
        </li>
        <li is-visible="criteriaHasC">
            <div is-visible="hasContentC" class="collapsible initially_closed">
                @{
                    GetListForCategory(uncertaintyC, AlienSpeciesAssessment2023CriteriaLetter.C.ToString());
                }
                <div class="collapsible_content">
                    <table class="numbers-table">
                        <caption class="table-title"><b>Kolonisert naturtypeareal.</b> Anslått prosentandel kolonisert areal i de naturtypene arten er observert i eller regnes med å observeres i innen 50 år eller 5 generasjoner. </caption>
                        <tr>
                            <td><b>Naturtype</b></td>
                            <td><b>Tidshorisont</b></td>
                            <td><b>Tydelig påvirka areal (%)</b></td>
                            <td><b>Vurderingsgrunnlag</b></td>
                        </tr>
                        @foreach (var natureType in assessment.ImpactedNatureTypes)
                        {
                            <tr>
                                <td>@natureType.Name</td>
                                <td>@natureType.TimeHorizon.DisplayName()</td>
                                <td>@natureType.ColonizedArea</td>
                                <td>
                                    <ul>
                                        @foreach (var background in natureType.Background)
                                        {
                                        <li>@background.DisplayName()</li>
                                        }
                                    </ul>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </li>
        <li is-visible="!isDecisiveCriteria">
            <p is-visible="UnusedCriteriaInvationPotential().Length > 0">
                Invasjonspotensial etter @UnusedCriteriaInvationPotential() er vurdert som fraværende (usannsynlig).
            </p>
        </li>
    </ul>

    <h3>@Constants.yAxisLabel</h3>
    <p>@Constants.yAxisExplanation</p>   

    <p is-visible="isDecisiveCriteria">
        <b>@Constants.speciesHas @assessment.ScoreEcologicalEffect.DisplayName().ToLowerInvariant() 
            @Constants.yAxisLabel.ToLower() (@Constants.JustScore @((int)assessment.ScoreEcologicalEffect))
        </b>
    </p>

    <b is-visible="isDecisiveCriteria">@Constants.determeningCriteriaHeading</b>
    <b is-visible="!isDecisiveCriteria">@Constants.otherCriteriaHeading</b>  
    <p is-visible="showNoEcologicalEffect">
        <p>@Constants.noEcoEffect</p>
    </p>
    <ul class="criteria-summary-list">
        <li is-visible="criteriaHasD && !showIsNk && hasContentD" class="collapsible initially_closed">           
            @{
                GetListForCategory(uncertaintyD, AlienSpeciesAssessment2023CriteriaLetter.D.ToString());
            }
            <div class="collapsible_content">
                <div is-visible="@assessment.SpeciesSpeciesInteractionsThreatenedSpecies != null && @assessment.SpeciesSpeciesInteractionsThreatenedSpecies.Count() != 0">
                    <p>
                        Arten er vurdert å ha følgende negative interaksjoner (type interaksjon) med følgende truede arter og nøkkelarter. Kun effekter som er dokumentert i Norge; eller i utlandet (enten for arten selv eller for en nært beslektet og sammenlignbar art), hvor effekten er sannsynlig å opptre i Norge i løpet av 50 år, er inkludert.
                    </p>
                    <div class="mobile_hide">
                        @{
                            GetSpeciesTableDesktop(assessment.SpeciesSpeciesInteractionsThreatenedSpecies);
                        }
                    </div>
                    <div class="only_mobile">
                        @{
                            GetSpeciesTablesMobile(assessment.SpeciesSpeciesInteractionsThreatenedSpecies);
                        }
                    </div>
                </div>
                <div is-visible="@assessment.SpeciesNaturetypeInteractionsThreatenedSpecies != null && @assessment.SpeciesNaturetypeInteractionsThreatenedSpecies.Count() != 0">
                    <p>
                        Arten er vurdert å ha følgende negative interaksjoner (type interaksjon) med grupper av arter som inkluderer truede arter eller nøkkelarter i følgende naturtyper. Kun effekter som er dokumentert i Norge; eller i utlandet (enten for arten selv eller for en nært beslektet og sammenlignbar art), hvor effekten er sannsynlig å opptre i Norge i løpet av 50 år, er inkludert.
                    </p>
                    <div class="mobile_hide">
                        @{
                            GetNatureTypeTableDesktop(assessment.SpeciesNaturetypeInteractionsThreatenedSpecies);
                        }
                    </div>
                    <div class="only_mobile">
                        @{
                            GetNatureNypeTablesMobile(assessment.SpeciesNaturetypeInteractionsThreatenedSpecies);
                        }
                    </div>
                </div>
                <div is-visible="@(!string.IsNullOrEmpty(assessment.EffectsOnSpeciesSupplementaryInformation))">
                    <p>Utfyllende informasjon rundt artens negative effekter:</p>
                    <p>@Html.Raw(assessment.EffectsOnSpeciesSupplementaryInformation)</p>
                </div>
                <div is-visible="@(!string.IsNullOrEmpty(assessment.EffectsOnThreathenedSpeciesUncertaintyDocumentation) && HasUncertainty(uncertaintyD))">
                    <p>
                        Det er knyttet usikkerhet rundt artens effekter som går utover utfallsrommet til den mest sannsynlige skåren på @uncertaintyD.Value.
                        Dette begrunnes i:
                    </p>
                    <p>@Html.Raw(assessment.EffectsOnThreathenedSpeciesUncertaintyDocumentation)</p>
                </div>                
            </div>
        </li>

        <li is-visible="criteriaHasE && !showIsNk && hasContentE" class="collapsible initially_closed">           
            @{
                GetListForCategory(uncertaintyE, AlienSpeciesAssessment2023CriteriaLetter.E.ToString());
            }
            <div class="collapsible_content">
                <div is-visible="@assessment.SpeciesSpeciesInteractions  != null && @assessment.SpeciesSpeciesInteractions .Count() != 0">
                    <p>
                        Arten er vurdert å ha følgende negative interaksjoner (type interaksjon) med øvrige stedegne arter, dvs. arter som hverken er truede eller nøkkelarter . Kun effekter som er dokumentert i Norge; eller i utlandet (enten for arten selv eller for en nært beslektet og sammenlignbar art), hvor effekten er sannsynlig å opptre i Norge i løpet av 50 år, er inkludert.
                    </p>
                    <div class="mobile_hide">
                        @{
                            GetSpeciesTableDesktop(assessment.SpeciesSpeciesInteractions);
                        }
                    </div>
                    <div class="only_mobile">
                        @{
                            GetSpeciesTablesMobile(assessment.SpeciesSpeciesInteractions);
                        }
                    </div>
                </div>
                <div is-visible="@assessment.SpeciesNaturetypeInteractions != null && @assessment.SpeciesNaturetypeInteractions.Count() != 0">
                    <p>
                        Arten er vurdert å ha følgende negative interaksjoner (type interaksjon) med grupper av arter i følgende naturtyper. Kun effekter som er dokumentert i Norge; eller i utlandet (enten for arten selv eller for en nært beslektet og sammenlignbar art), hvor effekten er sannsynlig å opptre i Norge i løpet av 50 år, er inkludert.
                    </p>
                    <div class="mobile_hide">
                        @{
                            GetNatureTypeTableDesktop(assessment.SpeciesNaturetypeInteractions);
                        }
                    </div>
                    <div class="only_mobile">
                        @{
                            GetNatureNypeTablesMobile(assessment.SpeciesNaturetypeInteractions);
                        }
                    </div>
                </div>
                <div is-visible="@(!string.IsNullOrEmpty(assessment.EffectsOnSpeciesSupplementaryInformation))">
                    <p>Utfyllende informasjon rundt artens negative effekter:</p>
                    <p>@Html.Raw(assessment.EffectsOnSpeciesSupplementaryInformation)</p>
                </div>
                <div is-visible="@(!string.IsNullOrEmpty(assessment.EffectsOnOtherNativeSpeciesUncertaintyDocumentation) && HasUncertainty(uncertaintyE))">
                    <p>
                        Det er knyttet usikkerhet rundt artens effekter som går utover utfallsrommet til den mest sannsynlige skåren på @uncertaintyE.Value.
                        Dette begrunnes i:
                    </p>
                    <p>@Html.Raw(assessment.EffectsOnOtherNativeSpeciesUncertaintyDocumentation)</p>
                </div>               
            </div>
        </li>

        <li is-visible="criteriaHasF && !showIsNk && hasContentF" class="collapsible initially_closed">           
            @{
                GetListForCategory(uncertaintyF, AlienSpeciesAssessment2023CriteriaLetter.F.ToString());
            }
            <div class="collapsible_content">
                <div is-visible="showFTable">
                    @{
                        GetFGTable(true);
                    }
                </div>
                <p is-visible="!string.IsNullOrEmpty(assessment.ThreatenedNatureTypesAffectedDomesticDescription)">
                    Utfyllende informasjon rundt artens negative effekter: @Html.Raw(assessment.ThreatenedNatureTypesAffectedDomesticDescription)
                </p>
            </div>            
        </li>

        <li is-visible="criteriaHasG">
            <div is-visible="!showIsNk && hasContentG" class="collapsible initially_closed">
                @{
                    GetListForCategory(uncertaintyG, AlienSpeciesAssessment2023CriteriaLetter.G.ToString());
                }
                <div class="collapsible_content">
                    <div is-visible="showGTable">
                        @{
                            GetFGTable(false);
                        }
                    </div>
                    <p is-visible="!string.IsNullOrEmpty(assessment.CommonNatureTypesAffectedDomesticDescription)">
                        Utfyllende informasjon rundt artens negative effekter: @Html.Raw(assessment.CommonNatureTypesAffectedDomesticDescription)
                    </p>
                </div>
            </div>
        </li>

        <li is-visible="criteriaHasH">
            <div is-visible="!showIsNk && hasContentH" class="collapsible initially_closed">
                @{
                    GetListForCategory(uncertaintyH, AlienSpeciesAssessment2023CriteriaLetter.H.ToString());
                }
                <div class="collapsible_content">
                    <div>
                        <table class="numbers-table" is-visible="showHTable">
                            <caption class="table-title"><b>Overføring av genetisk materiale.</b>  Tabellen viser hvilke stedegne arter den fremmede arten er vurdert å føre til genetisk forurensning av. Med genetisk forurensning menes introgresjon, hybridisering alene er ikke tilstrekkelig. Kun genetisk forurensing som er dokumentert eller sannsynlig er inkludert.</caption>
                            <tr>
                                <td><b>Stedegen art</b></td>
                                <td><b>Kategori i Rødlista 2021</b></td>
                                <td><b>Er arten en nøkkelart?</b></td>
                                <td><b>Geografisk omfang</b></td>
                                <td><b>Vurderingsgrunnlag</b></td>
                            </tr>
                            @foreach (var contaminant in assessment.GeneticContamination)
                            {
                                <tr>
                                    <td>@contaminant.VernacularName <br> @Html.Raw(Helpers.FormatScientificNameElement(contaminant.ScientificName)) @contaminant.ScientificNameAuthor</td>
                                    <td><i>@contaminant.RedListCategory.DisplayName()</i> @contaminant.RedListCategory</td>
                                    <td>@( contaminant.KeyStoneSpecie == true ? "ja" : "nei" )</td>
                                    <td>@contaminant.Scale.DisplayName()</td>
                                    <td>
                                        <ul>
                                            @foreach(var field in contaminant.Background)
                                            {
                                                <li>
                                                    @field.DisplayName()
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            }
                        </table>
                        <div is-visible="showGeneticContaminationUncertaintyDocumentation">
                            <p>
                                Det er knyttet usikkerhet rundt artens effekter som går utover utfallsrommet til den mest sannsynlige skåren på @uncertaintyH.Value.
                                Dette begrunnes i:
                            </p>
                            <p>@Html.Raw(assessment.GeneticContaminationUncertaintyDocumentation)</p>
                        </div>
                    </div>
                </div>
            </div>
        </li>

        <li is-visible="criteriaHasI">
            <div is-visible="!showIsNk && hasContentI" class="collapsible initially_closed">
                @{
                    GetListForCategory(uncertaintyI, AlienSpeciesAssessment2023CriteriaLetter.I.ToString());
                }
                <div class="collapsible_content">
                    <div>
                        <table class="numbers-table" is-visible="showITable">
                            <caption class="table-title"><b>Overføring av parasitter og patogener.</b> Tabellen viser hvilke parasitter eller patogener (inkludert bakterier og virus) arten er vurdert å overføre til stedegne verter, om parasitten er kjent for verten eller ei, samt om parasitten er fremmed eller stedegen. Den økologiske effekten av overføringen kan ikke være større enn den økologiske effekten parasitten selv vurderes å ha etter kriteriene D til H. Kun overføringer av parasitter og patogener som er dokumentert eller sannsynlig er inkludert. </caption>
                            <tr>
                                <td><b>Stedegen art</b></td>
                                <td><b>Kategori i Rødlista 2021</b></td>
                                <td><b>Er arten en nøkkelart?</b></td>
                                <td><b>Parasittens vitenskapelige navn</b></td>
                                <td><b>Parasittens status</b></td>
                                <td><b>Parasittens delkategori</b></td>
                                <td><b>Geografisk omfang</b></td>
                                <td><b>Vurderingsgrunnlag</b></td>
                            </tr>
                            @foreach (var transmission in assessment.ParasitePathogenTransmission)
                            {
                                <tr>
                                    <td>@transmission.VernacularName <br> @Html.Raw(Helpers.FormatScientificNameElement(transmission.ScientificName)) @transmission.ScientificNameAuthor</td>
                                    <td><i>@transmission.RedListCategory.DisplayName()</i> @transmission.RedListCategory</td>
                                    <td>@(transmission.KeyStoneSpecie == true ? "ja" : "nei")</td>
                                    <td>@transmission.ParasiteScientificName</td>
                                    <td>@transmission.ParasiteStatus.DisplayName()</td>
                                    <td>@transmission.ParasiteEcoEffect</td>
                                    <td>@transmission.Scale.DisplayName()</td>
                                    <td>
                                        <ul>
                                            @foreach (var field in transmission.Background)
                                            {
                                                <li>
                                                    @field.DisplayName()
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            }
                        </table>
                        <div is-visible="showParasitePathogenTransmissionUncertaintyDocumentation">
                            <p>
                                Det er knyttet usikkerhet rundt artens effekter som går utover utfallsrommet til den mest sannsynlige skåren på @uncertaintyI.Value.
                                Dette begrunnes i:
                            </p>
                            <p>@Html.Raw(assessment.ParasitePathogenTransmissionUncertaintyDocumentation)</p>
                        </div>
                    </div>
                </div>
            </div>
        </li>

        <li is-visible="!isDecisiveCriteria && UnusedCriteriaEcologicalEffect().Length > 0" class="collapsible initially_closed">
            <div class="collapsible_header">
                @Constants.effectAfterCriterium @UnusedCriteriaEcologicalEffect() 
                @Constants.evaluatedAsUnlikely
            </div>
        </li>
    </ul>
</div>
