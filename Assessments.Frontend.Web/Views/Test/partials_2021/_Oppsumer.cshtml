@model SpeciesAssessment2021
@* SEE example by searching species Bombus hyperboreus *@

@{
    var kriteriedok = Model.ExpertStatement;
    string ekspertgruppe = char.ToLower(Model.ExpertCommittee[0]) + Model.ExpertCommittee.Substring(1);

    if (!string.IsNullOrWhiteSpace(kriteriedok))
    {
        if (kriteriedok.Length > 600)
        {
            var count = kriteriedok.Split("<br/>").Length; // Detect nr of line breaks.
            if (count < 3) // Allow a few strays - such as beginning or end etc. But 2 is still to few to make sense.
            {
                // IN cases with big blocks of text with no line breaks, detect when a sentence ends in
                // parenhesis and create line break. These sentences are often of concluding nature
                // such as references or summarising some content, which is a nice time to take a break.
                kriteriedok = kriteriedok.Replace(").", ").<br/>");
            }
        }

        // Remove weird
        kriteriedok = kriteriedok.Replace("<u><br/></u>", "");
        kriteriedok = kriteriedok.Replace("<div>", "");
        kriteriedok = kriteriedok.Replace("</div>", "");
        kriteriedok = kriteriedok.Replace("font-family:=", "");
        kriteriedok = kriteriedok.Replace("roboto,=", "");
        kriteriedok = kriteriedok.Replace("sans-serif;", "");
        kriteriedok = kriteriedok.Replace("=\"", "");
        kriteriedok = kriteriedok.Replace("\" \"", "");
        kriteriedok = kriteriedok.Replace("\"\"", "");
        kriteriedok = kriteriedok.Replace("<b >", "<b>");

        // Turn u and b into headings
        kriteriedok = kriteriedok.Replace("<b>", "<h3>");
        kriteriedok = kriteriedok.Replace("</b>", "</h3>");
        kriteriedok = kriteriedok.Replace("<u>", "<h3>");
        kriteriedok = kriteriedok.Replace("</u>", "</h3>");
        kriteriedok = kriteriedok.Replace("</h3>", "</h3><p>");


        // Fix specific cases it went wrong
        kriteriedok = kriteriedok.Replace("<h3>)</h3>", ")");

        // Remove empty tags
        kriteriedok = kriteriedok.Replace("<b></b>", "");
        kriteriedok = kriteriedok.Replace("<u></u>", "");
        kriteriedok = kriteriedok.Replace("<h3></h3>", "");
        kriteriedok = kriteriedok.Replace("<i> </i>", " ");

        // Br into paragraphs, remove duplicates and those with spaces inside
        kriteriedok = kriteriedok.Replace("<br/><br/>", "<br/>");
        kriteriedok = kriteriedok.Replace("<br/>", "</p><p>");
        kriteriedok = kriteriedok.Replace("<p> ", "<p>");
        kriteriedok = kriteriedok.Replace(" </p>", "</p>");
        kriteriedok = kriteriedok.Replace("<p><p>", "<p>");
        kriteriedok = "<p>" + kriteriedok + "</p>";
        kriteriedok = kriteriedok.Replace("<p></p>", "");
    }
        }


        @if (!(Model.Category == "NA" || Model.Category == "NE" || Model.Category == "LC"))
{
    @if (!string.IsNullOrWhiteSpace(kriteriedok))
        {
        <div class="page_section">
            <h2>
                Oppsumering av vurdering
            </h2>

            <div class="expert_assesment">
                <div class="expert_text">
                    @*@kriteriedok<br />*@
                    @Html.Raw(kriteriedok)
                    <p class="quote_by">- Ekspertkomité for @ekspertgruppe</p>
                </div>
            </div>
        </div>
    }

}


@* // TODO: NOT YET MAPPED IN MAIN DATA
    <!-- Kategori Kriteriedokumentasjon -->
    @if (!string.IsNullOrWhiteSpace(assessment.Kriteriedokumentasjon))
    {


        <!-- Kategori endring -->
        @if (!string.IsNullOrEmpty(Model.KategoriEndretTil) && Model.UtdøingSterktPåvirket == "Ja")
        {<h3>Kategori-endring</h3>
            <div>Kategori endret til: @assessment.KategoriEndretTil</div>
        }

        <!-- Kategori UtdøingSterktPåvirket -->
        @if (assessment.UtdøingSterktPåvirket == "Ja")
        {
            <h3>Er utdøing Påvirket?</h3>
            @if (assessment.KategoriEndretFra != "" && assessment.KategoriEndretFra != null)
            {
                <div class="changedCat">Risiko for utdøing er sterkt påvirket av populasjoner i naboland. Kategori er derfor justert fra @assessment.KategoriEndretFra til @assessment.KategoriEndretTil. @Html.Raw(@assessment.ÅrsakTilNedgraderingAvKategori)</div>
            }
            else
            {
                <div class="changedCat">Risiko for utdøing er sterkt påvirket av populasjoner i naboland. Kategori er derfor justert til @assessment.KategoriEndretTil. @Html.Raw(@assessment.ÅrsakTilNedgraderingAvKategori)</div>
            }

        }

        <!-- Årsak til endring av kategori -->
        @if (!string.IsNullOrWhiteSpace(assessment.ÅrsakTilEndringAvKategori) && assessment.KategoriFraForrigeListe != assessment.Kategori)
        {
            <h3>Årsak til endring av kategori</h3>
            <div class="changedCat">Kategorien er endret fra forrige rødlistevurdering på grunn av @assessment.ÅrsakTilEndringAvKategori.Substring(0, 1).ToLower()@assessment.ÅrsakTilEndringAvKategori.Substring(1).</div>
        }

        @if (Model.Kategori.IndexOf("CR") >= 0 || Model.Kategori.IndexOf("EN") >= 0 || Model.Kategori.IndexOf("VU") >= 0 || Model.Kategori.IndexOf("NT") >= 0)
        {
            <h3>Gjeldende kriterier</h3>
            <p><b>@Model.Kriterier</b></p>
            <p class="fact_box">@ViewBag.glossary["oneliners"]["gjeldendekriterier"]</p>
        }

        <span class="criteria_conclusions">
            <partial name="/Views/Test/partials_2021/Kriterier_2021/_Kriterie_Automatic.cshtml" />
        </span>

    }

    <!-- Generasjonslengde-->
    @if (Model.Generasjonslengde != "" && Model.Generasjonslengde != null)
    {
        <h3>Generasjonstid: @assessment.Generasjonslengde år</h3>
        <p class="fact_box">
            @ViewBag.glossary["generasjonstid"]["description"]
        </p>
    }

*@
<!-- End section -->
}
