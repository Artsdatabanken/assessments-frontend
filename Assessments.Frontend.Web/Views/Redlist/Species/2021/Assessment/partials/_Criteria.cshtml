@model SpeciesAssessment2021
@using static Assessments.Frontend.Web.Infrastructure.Helpers

@*
    TODO: IMPROVE AND MOVE LOGIC FROM VIEW. NOT CRITICAL, WILL NOT PRIORITIZE.

    This component takes in the json file of criteria and displays it
    It also takes in the unhandled criteriasummarized string and trasforms it
    into two useable dictionaries which are then matched to relevant places in the json.
*@


@functions {

    private SpeciesAssessment2021MinMaxProbableIntervall GetQuantileForCriteria(string key)
    {
        switch (key)
        {
            case "A1":
                return Model.A1.QuantifiedReduction;
            case "A2":
                return Model.A2.QuantifiedReduction;
            case "A3":
                return Model.A3.QuantifiedReduction;
            case "A4":
                return Model.A4.QuantifiedReduction;
            case "B1":
                return Model.B1.Statistics;
            case "B2":
                return Model.B2.Statistics;
            case "Baii":
                return Model.BAii.Statistics;
            case "C":
                return Model.C.Statistics;
            case "C1":
                return Model.C1.Statistics;
            case "C2a(i)":
                return Model.C2Ai.Statistics;
        }
        return null;
    }
}


@{
    // MAPPING WHICH SHOULD HAVE BEEN MOVED  ELSEWHERE
    string GetThresholdValue(string key)
    {
        switch (key)
        {
            case "A1":
                return Model.A1.PreliminaryCategory;
            case "A2":
                return Model.A2.PreliminaryCategory;
            case "A3":
                return Model.A3.PreliminaryCategory;
            case "A4":
                return Model.A4.PreliminaryCategory;
            case "B1":
                return Model.B1.PreliminaryCategory;
            case "B2":
                return Model.B2.PreliminaryCategory;
            case "Baii":
                return Model.BAii.PreliminaryCategory;
            case "C":
                return Model.C.PreliminaryCategory;
            case "C1":
                return Model.C1.ThresholdValue;
            case "C2a(i)":
                return Model.C2Ai.ThresholdValue;
            case "C2a(ii)":
                return Model.C2Aii.ThresholdValue;
            case "C2b":
                return Model.C2bExtremeFluctuations;
            case "D1":
                return Model.D1PreliminaryCategory;
            case "D2":
                return Model.D2PreliminaryCategory;
        }
        return null;
    }


    Dictionary<string, Dictionary<string, object>> parseDictNested(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, Dictionary<string, object>>>();
    }

    Dictionary<string, object> parseDictObject(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, object>>();
    }

    Dictionary<string, string> parseDictString(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, string>>();
    }

    // Cast JSON to dictionary for easy iteration. Cant use those above as it's not a string...
    Dictionary<string, Dictionary<string, object>> criteria = ViewBag.kriterier.ToObject<Dictionary<string, Dictionary<string, object>>>();

    // CRITERIA SUMMARIZED SORTED BY SUBCRITERIA
    var subcriteria = Criteria.sortCriteria(Model.CriteriaSummarized);
    string options = "";
    if (subcriteria["B"].Contains("+"))
    {
        options = subcriteria["B"].Split("+")[1];
    }

    // FUNCTIONAL COMPONENTS BECAUSE LETS PRETEND THIS IS REACT.

    void hasKey(string key, Dictionary<string, object> field)
    {
        @if (field.ContainsKey(key))
        {
            var text = field[key].ToString();

            <p class="@key">
                @Html.Raw(Helpers.FixSpeciesLevel(text, Model.TaxonRank))
            </p>
        }

    }

    // ICON USED TO DECIDE IF ACTIVE OR NOT. X and V icons.
    void iconChooser(string compare)
    {
        if (compare == "active")
        {
            <span class="impact_v">
                <span class="material-icons">
                    done
                </span>
            </span>
        }
    }

    // ICON USED TO DECIDE IF ACTIVE OR NOT. X and V icons.
    void expandOrBullet(bool hasChild)
    {
        if (hasChild)
        {
            <span class="close_icon material-icons text_icon">arrow_drop_down</span>
            <span class="open_icon material-icons text_icon">arrow_right</span>
        }
        else
        {
            <span class="material-icons circle text_icon">
                circle
            </span>
        }
    }

    // DESCRIPTION
    void categoryDescription(string category)
    {
        if (!string.IsNullOrEmpty(category) && category.Length > 0)
        {
            if (category.Length > 2)
            {
                category = category.Substring(0, 2);
            }
            if (@ViewBag.categories.ContainsKey(category))
            {
                var final_string = @ViewBag.categories[category]["presentationstring"];
                <span class="capitalized categorytext">@final_string</span>
            }
        }

    }

    // THE LIST SHOWING A SUBCATEGORY'S THRESHOLD VALUES
    void thresholdsList(Dictionary<string, string> thresholds, string unit, SpeciesAssessment2021MinMaxProbableIntervall quantile, string comparator, string thresholdValue, string k, Dictionary<string, object> C_labels)
    {
        string CThresh = "";
        string C_Blank_Value = "";

        @if (k == "C1" || k.Contains("C2"))
        {

            if (!k.Contains("C2"))
            {
                unit = string.Empty;
            }
            CThresh = Model.C.PreliminaryCategory;
            C_Blank_Value = ViewBag.kriterier["C"]["content"]["threshold"][CThresh];
            C_Blank_Value = ViewBag.kriterier["C"]["content"]["comparator"] + " " + C_Blank_Value;
            C_Blank_Value = C_Blank_Value + " " + ViewBag.kriterier["C"]["content"]["unit"];
            C_Blank_Value = C_Blank_Value.Replace("<", "&lt;");
            C_Blank_Value = C_Blank_Value.Replace(">", "&gt;");

            <p><b> Alternativ for @Html.Raw(C_Blank_Value)</b></p>
        }

        <ul class="thresholdlist_container">
            @foreach (var (cat, catval) in thresholds)
            {
                string className = "inactive";
                @if (cat != null && thresholdValue != null && (cat == thresholdValue ||
                k == "C1" && catval.Substring(0, 2) == thresholdValue)
               || k.Contains("C2") && thresholdValue == catval)
                {
                    className = "active";
                }
                string C_key = "labels-" + CThresh;
                string labels = cat;


                if (C_labels.ContainsKey(C_key))
                {
                    var c_labels = parseDictString(C_labels[C_key].ToString());
                    labels = c_labels[cat];
                }

                string box_class = "";

                if ((k == "B1" || k == "B2") && labels == "NT")
                {
                    unit = string.Empty;
                }

                string catval_corrected = catval;

                if (k == "C1" && labels == "LC")
                {
                    catval_corrected = "5 % på 10 år eller 3 generasjoner";
                }

                <li class="thresholdlist @className">
                    <span class="graphic_element @labels @box_class">@labels</span>
                     @{categoryDescription(labels);}
                    <span class="threshold_element">
                        @comparator @Html.Raw(catval_corrected) @Html.Raw(unit)
                    </span>
                </li>
            }
        </ul>

        @if (k == "C1" || k.Contains("C2a"))
        {
            <p>
                <a href="https://www.artsdatabanken.no/files/33528" class="link-styled">
                    Se hele matrisen i vedlegg 1 i veilederen >
                </a>
            </p>
        }
    }



    // MAX MIN PROBABLE INTERVAL VALUES presentation
    void mmpi(string value, SpeciesAssessment2021MinMaxProbableIntervall quantile, string key, string k)
    {

        var json_quantile = parseDictObject(value);
        string unit = json_quantile.ContainsKey("unit") ? json_quantile["unit"].ToString() : "";
        string comparator = json_quantile.ContainsKey("comparator") ? json_quantile["comparator"].ToString() : "";
        string estimated = "-";


        @if (json_quantile.ContainsKey("threshold"))
        {
            var thresholds = parseDictString(json_quantile["threshold"].ToString());
            string thresholdValue = GetThresholdValue(k);
            thresholdsList(thresholds, unit, quantile, comparator, thresholdValue, k, json_quantile);
        }

        @if (quantile != null)
        {
            string min = @quantile.Min;
            string max = @quantile.Max;

            if (quantile.Punktestimat == false && !string.IsNullOrEmpty(@quantile.Minintervall) && !string.IsNullOrEmpty(@quantile.Maxintervall)) // true = default, thus may still include blank fields.
            {
                estimated = @quantile.Minintervall + " - " + @quantile.Maxintervall;
            }
            else
            {
                estimated = @quantile.Probable;
            }

            <p>
                @if (!string.IsNullOrEmpty(quantile.Calculated))
                {
                    <span>Estimert verdi: @FormatNumeric(quantile.Calculated) @Html.Raw(unit).</span><br>

                }
                
                 @if (!string.IsNullOrEmpty(min)&& !string.IsNullOrEmpty(max))
                 {
                    <span>Verdien antas å ligge mellom @FormatNumeric(min) @Html.Raw(unit) og @FormatNumeric(max) @Html.Raw(unit).</span><br>

                }
                @if (estimated.Length > 0 && @estimated != "-")
                {
                    <span>Mest trolig er den @estimated @Html.Raw(unit).</span>
                }
            </p>
        }
    }


    // Check for and present number-data including thresholds
    void getQuantile(Dictionary<string, object> value, string k, string key)
    {
        var quantile = GetQuantileForCriteria(k);
        if (k == "D1")
        {
            quantile = GetQuantileForCriteria("C");
        }
        if (quantile != null || k == "C2a(ii)" || k == "C2b" || k == "D1" || k == "D2")
        {
            mmpi(value["content"].ToString(), quantile, key, k);
        }
        else
        {
            //<span class="hotpink">MANGLER QUANTILE for @k</span>
        }
    }

    void getModel(string key)
    {

        @*
            TODO: This should not be necessary, as thing SHOULD be in the same object, but alas.
        *@

        List<string> ReductionBasedOn = null;
        string PreliminaryCategory = null;
        string ThresholdValue = null;

        if (key == "A1")
        {
            ReductionBasedOn = Model.A1.ReductionBasedOn;
            PreliminaryCategory = Model.A1.PreliminaryCategory;
        }
        else if (key == "A2")
        {
            ReductionBasedOn = Model.A2.ReductionBasedOn;
            PreliminaryCategory = Model.A2.PreliminaryCategory;
        }
        else if (key == "A3")
        {
            ReductionBasedOn = Model.A3.ReductionBasedOn;
            PreliminaryCategory = Model.A3.PreliminaryCategory;
        }
        else if (key == "A4")
        {
            ReductionBasedOn = Model.A4.ReductionBasedOn;
            PreliminaryCategory = Model.A4.PreliminaryCategory;
        }
        else if (key == "B1")
        {
            PreliminaryCategory = Model.B1.PreliminaryCategory;
        }
        else if (key == "B2")
        {
            PreliminaryCategory = Model.B2.PreliminaryCategory;
        }
        else if (key == "BAii")
        {
            PreliminaryCategory = Model.BAii.PreliminaryCategory;
        }
        else if (key == "C")
        {
            PreliminaryCategory = Model.C.PreliminaryCategory;
        }
        else if (key == "C1")
        {
            ThresholdValue = Model.C1.ThresholdValue;
        }
        else if (key == "C2a(i)")
        {
            ThresholdValue = Model.C2Ai.ThresholdValue;
        }
        else if (key == "D1")
        {
            PreliminaryCategory = Model.D1PreliminaryCategory;
        }
        else if (key == "D2")
        {
            PreliminaryCategory = Model.D2PreliminaryCategory;
        }
    }

    //GenerationTime
    void getGenerationTime(String key, String subkey)
    {
        string gen = !string.IsNullOrEmpty(Model.GenerationLength) ? Model.GenerationLength.Replace(".", ",") : "0";
        float generasjon = gen != null ? float.Parse(gen) : 0;
        float vurderingsperiode = 0;
        if (key == "A")
        {
            vurderingsperiode = Math.Max(generasjon * 3, 10);
        }
        else if (subkey == "C1")
        {
            if (Model.C1.ThresholdValue == "25")
            {
                vurderingsperiode = Math.Max(3, generasjon);
            }
            else if (Model.C1.ThresholdValue == "20")
            {
                vurderingsperiode = Math.Max(5, generasjon * 2);
            }
            else
            {
                vurderingsperiode = Math.Max(10, generasjon * 3);
            }
        }
        //Max value is 100 years always
        vurderingsperiode = Math.Min(vurderingsperiode, 100);

        if (key == "A" || subkey == "C1")
        {
            <p class="generation_time">
                Generasjonstiden er på @Model.GenerationLength år som gir en vurderingsperiode på @vurderingsperiode år
            </p>
        }
    }
}<!-- END OF ALL-->


@if (!string.IsNullOrEmpty(Model.CriteriaSummarized) && (Model.Category.Contains("CR") || Model.Category.Contains("EN") ||
Model.Category.Contains("VU") || Model.Category.Contains("NT")))

{
<div class="page_section criteria" id="criteria">
    <div class="criteria_description">
        @{ 
            string heading = ViewBag.glossary["criteria"]["tagline"];
            heading = @Helpers.FixSpeciesLevel(heading, Model.TaxonRank);
            string description = ViewBag.glossary["criteria"]["description"];
            description = @Helpers.FixSpeciesLevel(description, Model.TaxonRank);
        }
        <h3>@heading</h3>
        <p>
            @Html.Raw(description)
            <br>
            <a href="https://www.artsdatabanken.no/Pages/314252/Metode#316484" class="link-styled">Gå til metode</a>
        </p>
       
        <h4>@ViewBag.glossary["criteria"]["subheading"]</h4>
        <p>@Model.CriteriaSummarized
        <br>
         <a href="https://www.artsdatabanken.no/rodlisteforarter2021/Metode#316490" class="link-styled">Gå til ordliste</a>
        </p>
        
    </div>

    <!-- CONTROL BUTTONS -->
    <button class="changetab active" id="summary_criteria" onclick="criterialist('summary',this)">Oppsummering</button>
    <button class="changetab" id="full_list_criteria" onclick="criterialist('full_list',this)">Full liste</button>

    <!-- START OF PRESENTATION -->

    <div class="tabbed_element_container">

        @* // FUN STUNT which did not live up to the vision
            <partial name="/Views/Shared/_Criteriabar.cshtml" />
        *@
        <ul class="outer noline">
            <li class="tablist_listheader">
                <span class="summary_title">@Helpers.FixSpeciesLevel("{Art}ens", Model.TaxonRank) kriterier</span>
                <span class="full_list_title">Alle kriterier</span>
                <span class="full_list_description" style="display:none;">
                    Gjeldende kriterier for @Helpers.FixSpeciesLevel("{art}en", Model.TaxonRank) er markert med merket
                    <span class="impact_v">
                        <span class="material-icons">
                            done
                        </span>
                    </span>
                </span>
                @if (string.IsNullOrEmpty(Model.CriteriaSummarized))
                {
                    <span class="no_elements">Det er ikke angitt påvirkningsfaktorer.</span>
                }

            </li>
            @foreach (var (key, value) in criteria)
            {
                string isactive = @Criteria.inString(key, @Model.CriteriaSummarized);
                string valtitle = @Helpers.FixSpeciesLevel(value["title"].ToString(), Model.TaxonRank);
                <li class="@isactive">
                    <span class="text_container clickable" onclick="expandCriteria(this, 'opened_element') ">
                        @{ expandOrBullet(true);}
                        <span class="title_field">                           
                            @key - @valtitle
                            @{ iconChooser(Criteria.inString(key, Model.CriteriaSummarized)); }
                        </span>
                    </span>
                    @{ hasKey("description", @value);}
                    @{ getModel(key);}
                    @{ getQuantile(value, key, key);}

                    <!-- SUBCRITERIA (A1, ... D2) -->
                    @if (@value.ContainsKey("subcriteria"))
                    {
                        var thesubcriteria = parseDictNested(value["subcriteria"].ToString());
                        <ul class="second">
                            @foreach (var (k, v) in thesubcriteria)
                            {

                                string vtitle = @Helpers.FixSpeciesLevel(v["title"].ToString(), Model.TaxonRank);
                                var subcriteria_isactive = @Criteria.inString(k, subcriteria[key]);
                                <li class=" @subcriteria_isactive">
                                    <span class="text_container">
                                        <span class="text_collection">
                                            <span class="title_field clickable" onclick="expandCriteria(this, 'opened_element')">
                                                @{expandOrBullet(true);}
                                                <span class="text_text ">
                                                    @k - @vtitle
                                                    @{iconChooser(subcriteria_isactive);}
                                                </span>
                                            </span>
                                            @{ hasKey("description", v);}
                                            @{ getGenerationTime(key, k);}
                                            @{ getModel(k);}
                                            @{ getQuantile(v, k, key);}

                                            <!-- SUBCRITERIA SUBOPTIONS FOR A & C-CRITERIA && SUBOPTIONS FOR Ca2 -->

                                            @if (v.ContainsKey("subsub"))
                                            {
                                                string[] currentlist = Criteria.obtainSubCriteriaList(subcriteria[key].Split(";"), k);
                                                var subdict = parseDictNested(@v["subsub"].ToString());
                                                @if (currentlist.Length > 0)
                                                {
                                                    @if (key == "A")
                                                    {
                                                        <p class="subheading"> <b>Kunnskapsgrunnlag</b></p>
                                                    }

                                                    <ul class="third activeornot">
                                                        @foreach (var (subkey, subval) in subdict)
                                                        {

                                                            string subvaltitle = @Helpers.FixSpeciesLevel(subval["title"].ToString(), Model.TaxonRank);
                                                            string modelkey = k + subkey;
                                                            <li class="@Criteria.inList(subkey, currentlist)">
                                                                <span class="text_container">
                                                                    <span class="text_collection">
                                                                        <span class="title_field">
                                                                            @{expandOrBullet(false);}
                                                                            <span class="text_text">
                                                                                @subkey - <span>@subvaltitle @{ iconChooser(Criteria.inList(subkey, currentlist)); }</span>
                                                                            </span>
                                                                        </span>
                                                                        @{ getQuantile(subval, modelkey, modelkey);}
                                                                    </span>
                                                                    <!-- SUBCRITERIA SUBOPTIONS FOR A & C-CRITERIA && SUBOPTIONS FOR Ca2 -->
                                                                </span>
                                                            </li>
                                                        }
                                                    </ul>


                                                }
                                            }

                                        </span>
                                    </span>

                                </li>
                            }
                        </ul>
                        if (key == "C")
                        {
                            <ul class="second">
                                @{var activeC = @Criteria.inString("C", @Model.CriteriaSummarized); }
                                <li class="@activeC">
                                    <span class="text_container">
                                        <span class="text_collection">
                                            <span class="title_field" onclick="expandCriteria(this, 'opened_element')">
                                                @{expandOrBullet(true);}
                                                <span class="text_text clickable">
                                                    Konklusjon for C-kriteriet
                                                    <br>
                                                </span>
                                            </span>

                                            @{
                                                string c_category = Model.Category;
                                                bool c_comparison = Model.Category.Length > 2 && !string.IsNullOrEmpty(Model.CategoryAdjustedFrom);
                                                if (c_comparison)
                                                {
                                                    c_category = Model.CategoryAdjustedFrom;
                                                }
                                            }
                                            <p>
                                                @if (activeC == "active")
                                                {
                                                    <span class="b_summary">
                                                        <span class="graphic_element @c_category">@c_category</span>
                                                        <span>
                                                            Kombinasjon av populasjonsstørrelsen og underkriteriene gir til sammen kategori
                                                            @if (c_comparison)
                                                            {
                                                                @c_category
                                                            }
                                                            else
                                                            {
                                                                <partial name="/Views/Shared/_Category.cshtml" />
                                                            }
                                                        </span>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span>C-kriteriet er ikke gjeldende</span>
                                                }
                                            </p>
                                        </span>
                                    </span>
                                </li>
                            </ul>
                        }

                    }

                    @if (@value.ContainsKey("options"))
                    {
                        <ul class="second">
                            <li class="@Criteria.inString("B", @Model.CriteriaSummarized)">
                                <span class="text_container">
                                    <span class="text_collection">
                                        <span class="title_field clickable" onclick="expandCriteria(this, 'opened_element')">
                                            @{expandOrBullet(true);}
                                            <span class="text_text">
                                                Underkriterier
                                            </span>
                                        </span>

                                        <!-- SUBCRITERIA SUBOPTIONS FOR B CRITERIA -->
                                        @if (@value.ContainsKey("subcriteria"))
                                        {
                                            var thesubcriteria = parseDictNested(value["options"].ToString());
                                            <ul class="second">
                                                @foreach (var (k, v) in thesubcriteria)
                                                {
                                                    string vtitle = @v["title"].ToString();
                                                    var subcriteria_isactive = @Criteria.inString(k, subcriteria[key]);
                                                    <li class=" @subcriteria_isactive">
                                                        <span class="text_container">
                                                            <span class="text_collection">
                                                                <span class="title_field clickable" onclick="expandCriteria(this, 'opened_element')">
                                                                    @{expandOrBullet(true);}
                                                                    <span class="text_text ">
                                                                        @k - @Helpers.FixSpeciesLevel(vtitle, Model.TaxonRank)
                                                                    </span>
                                                                    @{iconChooser(subcriteria_isactive);}
                                                                </span>

                                                                <!-- SUBCRITERIA SUBOPTIONS FOR B -->

                                                                @if (v.ContainsKey("sub"))
                                                                {
                                                                    <ul class="subsub_list">
                                                                        @{
                                                                            var currentlist = options.Split(";");
                                                                            var current_element = "";
                                                                            foreach (string element in currentlist)
                                                                            {
                                                                                if (element.Contains(k))
                                                                                {
                                                                                    current_element = element;
                                                                                }
                                                                            }
                                                                            current_element = current_element.Replace(k, "");
                                                                            current_element = Criteria.removeOuterParenthesis(current_element);
                                                                            var clean_list = current_element.Split(",");
                                                                            var subdict = parseDictNested(@v["sub"].ToString());
                                                                        }

                                                                        @foreach (var (subkey, subvalue) in subdict)
                                                                        {
                                                                            string vsubtitle = subvalue["title"].ToString();
                                                                            var modelkey = key + k + subkey;
                                                                            string clickable = "";
                                                                            if (modelkey == "Baii")
                                                                            {
                                                                                clickable = "clickable";
                                                                            }
                                                                            <li class="listitem_criteria @Criteria.inList(subkey, clean_list)">
                                                                                <span class="text_container">
                                                                                    <span class="text_collection">
                                                                                        <span class="text_text @clickable" onclick="expandCriteria(this, 'opened_element')">
                                                                                            @{expandOrBullet(clickable == "clickable");}
                                                                                            @subkey - @Helpers.FixSpeciesLevel(vsubtitle, Model.TaxonRank)
                                                                                        </span>
                                                                                        @{ iconChooser(Criteria.inList(subkey, clean_list)); }
                                                                                    </span>

                                                                                </span>
                                                                                @{ getQuantile(subvalue, modelkey, modelkey);}
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                }
                                                            </span>
                                                        </span>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </span>
                                </span>
                            </li>
                        </ul>
                        <ul class="second">
                            @{var activeB = @Criteria.inString("B", @Model.CriteriaSummarized); }
                            <li class="@Criteria.inString("B", @Model.CriteriaSummarized)">
                                <span class="text_container">
                                    <span class="text_collection">
                                        <span class="title_field" onclick="expandCriteria(this, 'opened_element')">
                                            @{expandOrBullet(true);}
                                            <span class="text_text clickable">
                                                Konklusjon for B-kriteriet
                                                <br>
                                            </span>
                                        </span>

                                        @{
                                            string b_category = Model.Category;
                                            bool b_comparison = Model.Category.Length > 2 && !string.IsNullOrEmpty(Model.CategoryAdjustedFrom);
                                            if (b_comparison)
                                            {
                                                b_category = Model.CategoryAdjustedFrom;
                                            }
                                        }
                                        <p>
                                            @if (activeB == "active")
                                            {
                                                <span class="b_summary">
                                                    <span class="graphic_element @b_category">@b_category</span>
                                                    <span>
                                                        Kombinasjon av B1/B2 og underkriteriene gir til sammen kategori
                                                        @if (b_comparison)
                                                        {
                                                            @b_category
                                                        }
                                                        else
                                                        {
                                                            <partial name="/Views/Shared/_Category.cshtml" />
                                                        }
                                                    </span>
                                                </span>
                                            }
                                            else
                                            {
                                                <span>B-kriteriet er ikke gjeldende</span>
                                            }
                                        </p>
                                    </span>
                                </span>
                            </li>
                        </ul>
                    }
                </li>
            }
        </ul>
    </div>
</div>
}
else
{
    <partial name="/Views/Redlist/Species/2021/Assessment/partials/_NoCriteria.cshtml" />
}


