
@model SpeciesAssessment2021
@*
    TODO: IMPROVE AND MOVE LOGIC FROM VIEW. NOT CRITICAL, WILL NOT PRIORITIZE.

    This component takes in the json file of criteria and displays it
    It also takes in the unhandled criteriasummarized string and trasforms it
    into two useable dictionaries which are then matched to relevant places in the json.
*@


@functions {

    private SpeciesAssessment2021MinMaxProbableIntervall GetQuantileForCriteria(string key)
    {
        switch (key)
        {
            case "A1":
                return Model.A1.QuantifiedReduction;
            case "A2":
                return Model.A2.QuantifiedReduction;
            case "A3":
                return Model.A3.QuantifiedReduction;
            case "A4":
                return Model.A4.QuantifiedReduction;
            case "B1":
                return Model.B1.Statistics;
            case "B2":
                return Model.B2.Statistics;
            case "BAii":
                return Model.BAii.Statistics;
            case "C":
                return Model.C.Statistics;
            case "C1":
                return Model.C1.Statistics;
            case "C2Ai":
                return Model.C2Ai.Statistics;
        }
        return null;
    }
}


@{
    Dictionary<string, Dictionary<string, object>> parseDictNested(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, Dictionary<string, object>>>();
    }

    Dictionary<string, object> parseDictObject(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, object>>();
    }

    Dictionary<string, string> parseDictString(string json)
    {
        return Newtonsoft.Json.Linq.JObject.Parse(json).ToObject<Dictionary<string, string>>();
    }

    // Cast JSON to dictionary for easy iteration. Cant use those above as it's not a string...
    Dictionary<string, Dictionary<string, object>> criteria = ViewBag.kriterier.ToObject<Dictionary<string, Dictionary<string, object>>>();


    // Each criteria by letter is handled differently.
    string a = "", b = "", c = "", d = "";

    void placeCriteria(string criteria)
    {
        if (!string.IsNullOrEmpty(criteria))
        {
            if (criteria.Contains("A"))
            {
                a = criteria;
            }
            else if (criteria.Contains("B"))
            {
                b = criteria;
            }
            else if (criteria.Contains("C"))
            {
                c = criteria;
            }
            else if (criteria.Contains("D"))
            {
                d = criteria;
            }
        }


    }

    // Iterate the criteria string and place each separate criteria in its correct container.
    if (!string.IsNullOrEmpty(Model.CriteriaSummarized) && Model.CriteriaSummarized.Contains(";"))
    {
        // SPLIT THE LIST AND LOOP THEM
        foreach (string crit in Model.CriteriaSummarized.Split(";"))
        {
            placeCriteria(crit);
        }
    }
    else
    {
        placeCriteria(@Model.CriteriaSummarized);
    }


    // Sort criteria contents

    string subCriteria(string element, string bigstring)
    {
        return bigstring.Replace("+", ";" + element);
    }

    void hasKey(string key, Dictionary<string, object> field)
    {
        @if (field.ContainsKey(key))
        {
            <p class="@key">
                @field[key]
            </p>
        }

    }

    a = subCriteria("A", a); // A CRITERIA - OPTIONS AND SUBCRITERIA ARE NOT SEPARATE ENTITIES
    c = subCriteria("C", c); // C CRITERIA - All options are only relevant for C2 - handle in code.
    d = subCriteria("D", d); // D CRITERIA: - ONLY subcriteria.

    // B CRITERIA - OPTIONS AND SUBCRITERIA ARE SEPARATE ENTITIES, options may contain sub-options

    string b_subcriteria = "";
    string b_options = "";

    b = subCriteria("B", b);
    if (b.Contains("B1"))
    {
        b_subcriteria += "B1;";
        b = b.Replace("B1", "");
    }
    if (b.Contains("B2"))
    {
        b_subcriteria += "B2";
        b = b.Replace("B2", "");
    }

    b = b.Replace("b", ";b");
    b = b.Replace("c", ";c");
    var b_distinctlist = b.Split(";").Distinct();
    b_options = string.Join(";", b_distinctlist);
    b = b_subcriteria + ";" + b_options;


    


    string[] obtainSubCriteriaList(string[] splitlist, string k)
    {
        var current_element = "";
        @foreach (string element in splitlist)
        {
            if (element.Contains(k))// k = current criteria
            {
                current_element = element;
            }
        }
        current_element = current_element.Replace(k, ""); // remove main criteria, leaving nested subcriteria
        current_element = Criteria.removeOuterParenthesis(current_element);
        current_element = Criteria.handleCCriteria(current_element, k);
        return current_element.Split(";");
    }

    // The dictionaries used in the view <- two dicts made sense back when A was thought to have options as well. Now not as much

    var subcriteria = new Dictionary<string, string>(){
    {"A", a},
    {"B", b_subcriteria},
    {"C", c},
    {"D", d}
    };

    var options = new Dictionary<string, string>(){
    {"B", b_options},
    };

    // Functions relevant to string separation

    





    // FUNCTIONAL COMPONENTS BECAUSE LETS PRETEND THIS IS REACT.

    void iconChooser(string compare)
    {
        if (compare == "active")
        {
            <span class="material-icons" style="color:darkgreen">
                done
            </span>
        }
        else if (compare == "maybe")
        {
            <span class="material-icons">
                pause
            </span>
        }
        else
        {
            <span class="material-icons" style="color:darkred">
                close
            </span>
        }
    }

    void fancyList(Dictionary<string, string> thresholds, string unit, SpeciesAssessment2021MinMaxProbableIntervall quantile, string comparator, string thresholdValue)
    {
        <p> VERDI: @thresholdValue</p>
        <ul>
            @foreach (var (cat, catval) in thresholds)
            {
                string className = "inactive";
                @if(cat != null && thresholdValue != null && cat.Contains(thresholdValue)){
                    className = "active";
                }
                <li class="thresholdlist @className">
                    <span class="graphic_element @cat">@cat</span> 
                    <span>@comparator @catval @unit</span>
                </li>
            }
        </ul>
    }


    void getQuantile(Dictionary<string, object> value, string k, string key)
    {
        // CALCULATIONS, NUMBERS AND ALL FUN THINGS
        var quantile = GetQuantileForCriteria(k);
        if (quantile != null)
        {
            mmpi(value["content"].ToString(), GetQuantileForCriteria(k), key, k);
        }
    }

    void mmpi(string value, SpeciesAssessment2021MinMaxProbableIntervall quantile, string key, string k)
    {

        var json_quantile = parseDictObject(value);
        string unit = json_quantile.ContainsKey("unit") ? json_quantile["unit"].ToString() : "";
        string comparator = json_quantile.ContainsKey("comparator") ? json_quantile["comparator"].ToString() : "";
        string min = @quantile.Min;
        string max = @quantile.Max;
        string estimated = "-";

        <div class="criteria_results">
            @if (quantile.Punktestimat == false) // true = default, thus may still include blank fields.
            {
                estimated = @quantile.Maxintervall + " - " + @quantile.Minintervall;
            }
            else
            {
                estimated = @quantile.Probable;
            }

            <p>
                <span>Estimert verdi ligger på @quantile.Calculated @unit.</span><br />
                <span>Det antas en nedgang på mellom @min @unit og @max @unit.</span><br />
                <span>
                    @if (estimated.Length > 0)
                    {<span>Den mest trolige verdien er @estimated @unit</span>}.
                </span>
            </p>

            @if (json_quantile.ContainsKey("threshold") )
            {
                var thresholds = parseDictString(json_quantile["threshold"].ToString());
                string thresholdValue = GetThresholdValue(k);

                fancyList(thresholds, unit, quantile, comparator, thresholdValue);
                
            }


        </div>

    }<!-- END OF FUNCTION-->


    void GetModel(string key)
    {

        @*
            TODO: This should not be necessary, as thing SHOULD be in the same object, but alas.
        *@

        List<string> ReductionBasedOn = null;
        string PreliminaryCategory = null;
        string ThresholdValue = null;

        if (key == "A1")
        {
            ReductionBasedOn = Model.A1.ReductionBasedOn;
            PreliminaryCategory = Model.A1.PreliminaryCategory;
        }
        else if (key == "A2")
        {
            ReductionBasedOn = Model.A2.ReductionBasedOn;
            PreliminaryCategory = Model.A2.PreliminaryCategory;
        }
        else if (key == "A3")
        {
            ReductionBasedOn = Model.A3.ReductionBasedOn;
            PreliminaryCategory = Model.A3.PreliminaryCategory;
        }
        else if (key == "A4")
        {
            ReductionBasedOn = Model.A4.ReductionBasedOn;
            PreliminaryCategory = Model.A4.PreliminaryCategory;
        }
        else if (key == "B1")
        {
            PreliminaryCategory = Model.B1.PreliminaryCategory;
        }
        else if (key == "B2")
        {
            PreliminaryCategory = Model.B2.PreliminaryCategory;
        }
        else if (key == "BAii")
        {
            PreliminaryCategory = Model.BAii.PreliminaryCategory;
        }
        else if (key == "C")
        {
            PreliminaryCategory = Model.C.PreliminaryCategory;
        }
        else if (key == "C1")
        {
            ThresholdValue = Model.C1.ThresholdValue;
        }
        else if (key == "C2Ai")
        {
            ThresholdValue = Model.C2Ai.ThresholdValue;
        }
        else if (key == "D1")
        {
            PreliminaryCategory = Model.D1PreliminaryCategory;
        }
        else if (key == "D2")
        {
            PreliminaryCategory = Model.D2PreliminaryCategory;
        }



        @if (Helpers.isNotEmpty(PreliminaryCategory) || Helpers.isNotEmpty(ThresholdValue) || ReductionBasedOn != null && ReductionBasedOn.Count != 0)
        {
            <div style="padding:10px; background:pink;">
                @if (ReductionBasedOn != null)
                {
                    <span>
                        Reduksjon baser på :
                        @foreach (string el in ReductionBasedOn)
                        {<span>@el</span>}
                    </span>
                    <br />
                }

                @if (Helpers.isNotEmpty(ThresholdValue))
                {<span>Terskelverdi: @ThresholdValue</span><br />}
                @if (Helpers.isNotEmpty(PreliminaryCategory))
                {<span>Kategori basert på kriterie: @PreliminaryCategory</span><br />}
            </div>


        }

    }


    string GetThresholdValue(string key)
    {
        string ThresholdValue = null;

        if (key == "A1")
        {
            ThresholdValue = Model.A1.PreliminaryCategory;
        }
        else if (key == "A2")
        {
            ThresholdValue = Model.A2.PreliminaryCategory;
        }
        else if (key == "A3")
        {
            ThresholdValue = Model.A3.PreliminaryCategory;
        }
        else if (key == "A4")
        {
            ThresholdValue = Model.A4.PreliminaryCategory;
        }
        else if (key == "B1")
        {
            ThresholdValue = Model.B1.PreliminaryCategory;
        }
        else if (key == "B2")
        {
            ThresholdValue = Model.B2.PreliminaryCategory;
        }
        else if (key == "BAii")
        {
            ThresholdValue = Model.BAii.PreliminaryCategory;
        }
        else if (key == "C")
        {
            ThresholdValue = Model.C.PreliminaryCategory;
        }
        else if (key == "C1")
        {
            ThresholdValue = Model.C1.ThresholdValue;
        }
        else if (key == "C2Ai")
        {
            ThresholdValue = Model.C2Ai.ThresholdValue;
        }
        else if (key == "D1")
        {
            ThresholdValue = Model.D1PreliminaryCategory;
        }
        else if (key == "D2")
        {
            ThresholdValue = Model.D2PreliminaryCategory;
        }
        return ThresholdValue;
    }



}<!-- END OF ALL-->


@if (!string.IsNullOrEmpty(Model.CriteriaSummarized) && (Model.Category.Contains("CR") || Model.Category.Contains("EN") ||
Model.Category.Contains("VU") || Model.Category.Contains("NT")))

{
    <div class="page_section criteria">
        <div class="criteria_description">
            <h3>@ViewBag.glossary["criteria"]["tagline"]</h3>
            <p>@ViewBag.glossary["criteria"]["description"]</p>
            <button class="tertiary tinybutton">Gå til metode <span class="material-icons">open_in_new</span></button>
            <h4>@ViewBag.glossary["criteria"]["subheading"]</h4>
            <p>@Model.CriteriaSummarized<br /></p>
            @*// TODO: FIX BUTTONS. MAKE URLS, make pretty, add link*@
            <button class="tertiary tinybutton">Gå til ordliste <span class="material-icons">open_in_new</span></button>
        </div>

        <button class="changetab active">Kompakt</button><button class="changetab">Full visning</button>
        <div class="tabbed_element_container">
            <!-- MAIN CRITERIA -->
            @foreach (var (key, value) in criteria)
            {
                <div class="criteria_element @Criteria.inString(key, @Model.CriteriaSummarized) listitem_criteria">

                    @{ iconChooser(Criteria.inString(key, Model.CriteriaSummarized)); }
                    <div class="listitem_text_field">
                        <h4>@key -  @value["title"]</h4>
                        @{ hasKey("description", @value);}
                        @{ GetModel(key);}
                        @{ getQuantile(value, key, key);}


                        <!-- SUB CRITERIA : obtain and reformat necessary data -->
                        @if (@value.ContainsKey("subcriteria"))
                        {
                            <div class="criteria_subcriteria">
                                @{
                                    var thesubcriteria = parseDictNested(value["subcriteria"].ToString());
                                }
                                @foreach (var (k, v) in thesubcriteria)
                                {
                                    <!-- ITERATE THROUGH ALL SUBCRITERIA -->
                                    <div class=" @Criteria.inString(k, subcriteria[key]) listitem_criteria">

                                        @{iconChooser(@Criteria.inString(k, subcriteria[key]));}
                                        <div class="listitem_text_field">

                                            <h5>@k <span>@v["title"]</span></h5>
                                            @{ hasKey("description", v);}
                                            @{ GetModel(k);}
                                            @{ getQuantile(v, k, key);}

                                            <!-- SUBCRITERIA SUBOPTIONS FOR A & C-CRITERIA && SUBOPTIONS FOR Ca2 -->
                                            @if (v.ContainsKey("subsub"))
                                            {
                                                string[] currentlist = obtainSubCriteriaList(subcriteria[key].Split(";"), k);
                                                var subdict = parseDictNested(@v["subsub"].ToString());
                                                @if (currentlist.Length > 0)
                                                {
                                                    <div class="subsub_list">
                                                        <h6 class="subheading">Kunnskapsgrunnlag</h6>

                                                        @foreach (var (subkey, subval) in subdict)
                                                        {
                                                            <div class="@Criteria.inList(subkey, currentlist) listitem_criteria">
                                                                @{ iconChooser(Criteria.inList(subkey, currentlist)); }
                                                                <h6 class="listitem_text_field">
                                                                    <b>@subkey</b>
                                                                    <span>@subval["title"]</span>
                                                                </h6>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        <!-- OPTIONS-->
                        @if (@value.ContainsKey("options"))
                        {
                            var newDictionary = parseDictNested(value["options"].ToString());
                            <div class="criteria_options">
                                <h5 class="subheading"> Underkriterier </h5>
                                @{ hasKey("options_description", @value);}
                                @foreach (var (k, v) in newDictionary)
                                {
                                    <div class="listitem_criteria @Criteria.inString(k, options[key]) ">
                                        @{ iconChooser(Criteria.inString(k, options[key])); }
                                        <div class="listitem_text_field">
                                            <h5>@k. <span>@v["title"]</span></h5>
                                            @{ //hasKey("description", v)
                                                ;}
                                            @if (v.ContainsKey("sub"))
                                            {
                                                <div class="subsub_list">
                                                    @{
                                                        var currentlist = options[key].Split(";");
                                                        var current_element = "";
                                                        foreach (string element in currentlist)
                                                        {
                                                            if (element.Contains(k))
                                                            {
                                                                current_element = element;
                                                            }
                                                        }
                                                        current_element = current_element.Replace(k, "");
                                                        current_element = Criteria.removeOuterParenthesis(current_element);
                                                        var clean_list = current_element.Split(",");
                                                        var subdict = parseDictNested(@v["sub"].ToString());
                                                    }
                                                    @foreach (var (subkey, subvalue) in subdict)
                                                    {
                                                        <div class="listitem_criteria @Criteria.inList(subkey, clean_list)">
                                                            @{ iconChooser(Criteria.inList(subkey, clean_list)); }
                                                            <h6 class="listitem_text_field">
                                                                <span>@subkey </span>
                                                                <span>@subvalue["title"]</span>
                                                            </h6>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }<!-- END OPTIONS-->
                    </div>
                </div>
            }
        </div>


    </div>
}
else
{
    <partial name="/Views/Redlist/Assessment/partials/_NoCriteria.cshtml" />

}
