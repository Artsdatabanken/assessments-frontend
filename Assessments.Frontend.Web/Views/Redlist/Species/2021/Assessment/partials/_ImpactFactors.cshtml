@model SpeciesAssessment2021
@functions{

    // Snatched and shortened from 2018 nature red list,
    // Not yet ready for use.
    // https://github.com/Artsdatabanken/RodlisteNaturtyper2018visning/blob/2019update/Views/Home/Partials/impact-factors.cshtml

    string ImpactIcon(string id, string subtitle)
    {
        var number = id.Substring(0, 1);
        var biggernumber = id.Substring(0, 3);

        // 0. ingen trussel / no factor  has no image, as it is never displayed.
        if (number == "1")
        {
            // habitat icons are divided further
            number = biggernumber;
        }

        return "https://design.artsdatabanken.no/impact-icons/" + number + ".png";
    }

    string activeOrNot(string element)
    {
        @foreach (var factor in Model.ImpactFactors)
        {
            @if (factor.Id == element)
            {
                return "active final";
            }
            else if (factor.Id.StartsWith(element))
            {
                return "active";
            }
        }

        return "inactive";
    }

    void iconChooser(string compare)
    {
        @if (@compare == "active" || @compare == "active final")
        {
            
            <span class="impact_v">
                <span class="material-icons">
                    done
                </span>
            </span>
        }

    }

    void toggleChooser(Dictionary<string, object> value)
    {
        @if (value.ContainsKey("subelement"))
        {
            <span class="close_icon material-icons text_icon">arrow_drop_down</span>
            <span class="open_icon material-icons text_icon">arrow_right</span>
        }
        else
        {
            <span class="material-icons circle text_icon">
                circle
            </span>
        }
    }

    string isClickableClass(Dictionary<string, object> value)
    {
        @if (value.ContainsKey("subelement"))
        {
            return "clickable";
        }
        return "";
    }

    void listHeaders(string key, Dictionary<string, object> value)
    {
        string has_table = "";
        foreach (var factor in Model.ImpactFactors)
        {
            @if (factor.Id == (key))
            {
                has_table = "has_table";
            }
        }
        <span class="text_container @has_table" onclick="expand(this, 'first_hidden_layer')">

            <span class="text_collection">
                <span class="title_field  @isClickableClass(value)">
                    @{ toggleChooser(value);}
                    <span class="text_text">
                        @value["title"]
                        @{iconChooser(activeOrNot(key));}
                    </span>
                </span>


                @foreach (var factor in Model.ImpactFactors)
                {
                    @if (factor.Id == (key))
                    {
                        <div class="impact_table">
                            <div>
                                <b>Omfang</b><br />
                                <span>@factor.PopulationScope</span>
                            </div>
                            <div class="sideborders">
                                <b>Alvorlighetsgrad</b><br />
                                <span>@factor.Severity</span><br />
                            </div>
                            <div>
                                <b>Tidsrom</b><br />
                                @factor.TimeScope
                            </div>
                        </div>
                    }
                }

            </span>
        </span>
    }

}

@{
    Dictionary<string, Dictionary<string, object>> impactfactors_json = ViewBag.impactfactors.ToObject<Dictionary<string, Dictionary<string, object>>>();

}


@{ if (!Model.Category.Contains("LC") && !Model.Category.Contains("NA") && !Model.Category.Contains("NE") && !Model.Category.Contains("RE"))
    {
        <div class="page_section impact" id="impactfactors">
            <h2>Påvirkningsfaktorer </h2>
            <p>
                Nedenfor listes det opp forskjellige påvirkningsfaktorer som kan gi utslag for rødlisting av arten.
            </p>

            <button id="summary" class="changetab active" onclick="impactlist('summary',this)">Oppsummering</button>
            <button id="full_list" class="changetab" onclick="impactlist('full_list',this)">Full liste</button>
            <br />
            <ul class="outer tabbed_element_container">
                @foreach (var (key, value) in impactfactors_json)
                {
                    <li class="@activeOrNot(key)">
                        <span  
                              class="text_container @isClickableClass(value)" 
                              onclick="expand(this, 'first_hidden_layer')">
                            @{toggleChooser(value);}
                            @value["title"]
                            @{iconChooser(activeOrNot(key));}
                        </span>

                        @if (value.ContainsKey("subelement"))
                        {
                            var first_layer = Newtonsoft.Json.Linq.JObject.Parse(value["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                            <ul class="second @activeOrNot(key)">
                                @foreach (var (first_k, first_v) in first_layer)
                                {
                                    <li class="@activeOrNot(first_k)">
                                        @{listHeaders(first_k, first_v);}

                                        @if (first_v.ContainsKey("subelement"))
                                        {
                                            <ul class="third">
                                                @{
                                                    var second_layer = Newtonsoft.Json.Linq.JObject.Parse(first_v["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                                                }
                                                @foreach (var (second_k, second_v) in second_layer)
                                                {
                                                    <li class="@activeOrNot(second_k)">
                                                        @{listHeaders(second_k, second_v);}

                                                        @if (second_v.ContainsKey("subelement"))
                                                        {
                                                            <ul class="fourth">
                                                                @{
                                                                    var third_layer = Newtonsoft.Json.Linq.JObject.Parse(second_v["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                                                                }
                                                                @foreach (var (third_k, third_v) in third_layer)
                                                                {
                                                                    <li class="@activeOrNot(third_k)">
                                                                        @{listHeaders(third_k, third_v);}
                                                                        @if (third_v.ContainsKey("subelement"))
                                                                        {
                                                                            <ul class="fifth">
                                                                                @{
                                                                                    var fourth_layer = Newtonsoft.Json.Linq.JObject.Parse(third_v["subelement"].ToString()).ToObject<Dictionary<string, Dictionary<string, object>>>();
                                                                                }
                                                                                @foreach (var (fourth_k, fourth_v) in fourth_layer)
                                                                                {
                                                                                    <li class="@activeOrNot(fourth_k)">
                                                                                        @{listHeaders(fourth_k, fourth_v);}
                                                                                    </li>
                                                                                }
                                                                            </ul>
                                                                        }
                                                                    </li>
                                                                }
                                                            </ul>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                            </ul>
                        }

                    </li>
                }



            </ul>

        </div>

    }
}
<script>

    // JS only relevant for users with javascript. 

    var first = true;
     
    function impactlist(which, button) {
        // See more text by altering css of the clicked element's top parent node
        document.getElementById('summary').classList.remove("active");
        document.getElementById('full_list').classList.remove("active");

        if (which == 'full_list') {
            document.getElementById('impactfactors').classList.add("full_list");
            document.getElementById('impactfactors').classList.remove("summary");
            if (first == true) {
                first_close();
            }
            first = false;
        }
        if (which == 'summary') {
            document.getElementById('impactfactors').classList.add("summary");
            document.getElementById('impactfactors').classList.remove("full_list");
        }
        button.classList.add("active");
    }

    function expand(element, className) {
        element = element.parentNode;
        var mainparent = document.getElementById('impactfactors').classList;
        // Never expand or collapse summary items
        if (!mainparent.contains("summary")) {
            if (element.classList.contains(className)) {
                element.classList.remove(className);
            } else {
                element.classList.add(className);
            }
        }        
    }

    function first_close() {
        var elList = document.getElementsByClassName("inactive");
        for (var i = 0; i < elList.length; i++) {
            elList[i].classList.add("first_hidden_layer");
        }
    }

    function showTabButtons() {
        var elList = document.getElementsByClassName("changetab");
        for (var i = 0; i < elList.length; i++) {
            elList[i].style.visibility = "visible";
        }
    }

    showTabButtons();
    document.getElementById('impactfactors').classList.add("summary");
    
</script>