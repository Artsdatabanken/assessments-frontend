@model AlienSpeciesDetailViewModel
@using Assessments.Mapping.AlienSpecies.Model.Enums
@using System;

@{
    /* Risk Matrix 2023
     * 
   Filled line - Criteria value
   -> Determines risk risk-levelegory

   Dashed/Dotted Line - Uncertainty
   -> one step up/down from risk risk-levelegory
    x-axis: A-C criteria. 
    y-axis: D-I criteria
    */

    // Risk risk-levelegory placement
    int x = Model.Assessment.ScoreInvasionPotential.Value;
    int y = Model.Assessment.ScoreEcologicalEffect.Value;
    List<AlienSpeciesAssessment2023Criterion> yAxisCriteriaList = new List<AlienSpeciesAssessment2023Criterion>();    


    // ~*~ Y Uncertainty : Eco effect ~*~
    int yHigherUncertainty = y;
    int yLowerUncertainty = y;

    // 1. Obtain all counting criteria
    foreach (var criterion in Model.Assessment.Criteria)
    {
        var letter = criterion.CriteriaLetter;
        var xAxis = (letter == AlienSpeciesAssessment2023CriteriaLetter.A || letter == AlienSpeciesAssessment2023CriteriaLetter.B || letter == AlienSpeciesAssessment2023CriteriaLetter.C);
        if (!xAxis){
            if (criterion.Value > 0 && criterion.Value == y) 
            {
                yAxisCriteriaList.Add(criterion);
            }
        }
    }

    // 2. Obtain higher and lower uncertainties
    List<int> lowestYList = new List<int>();

    if (yAxisCriteriaList.Count == 1)
    {
        yHigherUncertainty = yAxisCriteriaList[0].UncertaintyValues.Max();
        yLowerUncertainty = yAxisCriteriaList[0].UncertaintyValues.Min();
    }
    if (yAxisCriteriaList.Count > 1 && !yAxisCriteriaList.All(x => x.UncertaintyValues.Count == 1)) //More than one decisive criteria and at least one has uncertainty
    {
        yHigherUncertainty = yAxisCriteriaList.Select(x => x.UncertaintyValues.Max()).Max(); // Always use highest uncertainty 
        foreach (var criterion in yAxisCriteriaList) 
        {     
            lowestYList.Add(criterion.UncertaintyValues.Min()); // dump alllower uncertainties into one comparison-list  
        }
        
        // 3. set lower uncertainty if all lower uncertainty values are the same
        if (lowestYList.Distinct().Count() == 1)
        {
            yLowerUncertainty = lowestYList[0];
        }
    }
    

    // ~*~ x Uncertainty - Invation Potential ~*~

    // 1. Obtain A, B & C criteria
    var critA = Model.Assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.A).FirstOrDefault();
    var critB = Model.Assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.B).FirstOrDefault();
    var critC = Model.Assessment.Criteria.Where(x => x.CriteriaLetter == AlienSpeciesAssessment2023CriteriaLetter.C).FirstOrDefault();

    // Obtain the decisive criteria:
    var decisiveX = Model.Assessment.DecisiveCriteria.Split(",")[0];
    bool deciciveAB = (decisiveX.Contains("A")||decisiveX.Contains("B"))?true:false;
    bool deciciveC = decisiveX.Contains("C")?true:false;

    // Necessary string values
    string x_conclusion = "" + x;
    string AB_conclusion = "";
    string C_conclusion = "";        

    // Dictionary with matrix numbers vs. criterion uncertainty
    var stringToUNumber = new Dictionary<string, int>(){
	        {"1", 0},
	        {"1>", 1},
            {"2", 2},
            {"><2", 3},
	        {"2>", 4},
            {"><2>", 5},
            {"3", 6},
            {"><3", 7},
	        {"3>", 8},
            {"><3>", 9},
            {"4", 10},
            {"><4", 11},
        };

    // Reverse lookup of stringToUNumberDictionary
    static string numberToConclusionString( int number,Dictionary<string, int> stringToUNumber){
        return stringToUNumber.FirstOrDefault(x => x.Value == number).Key;
    }

    // A + B: Full table of uncertainties Hanno's excel sheet with <x> and <y>. 
    // converted from string notation to 0-indexed unique numbers for each case, per stringToUNumber.
    static int uncertaintyLookup( int a,int b){
        int[,] uncertaintyComparison = {
                {0, 0,  0,  0,  1,  1,  2,  3,  2,  3,  2,  2},
                {1, 1,  1,  1,  1,  1,  4,  5,  4,  5,  4,  4},
                {2, 2,  2,  2,  4,  4,  6,  7,  6,  7,  6,  6},
                {3, 3,  3,  3,  5,  5,  7,  7,  7,  7,  7,  7},
                {2, 4,  4,  4,  4,  4,  6,  7,  8,  9,  8,  8},
                {3, 5,  5,  5,  5,  5,  7,  7,  9,  9,  8,  9},
                {2, 4,  6,  7,  6,  7,  6,  6,  8,  8,  10, 11},
                {2, 4,  7,  7,  7,  7,  6,  7,  8,  9,  11, 11},
                {4, 4,  6,  7,  8,  9,  8,  8,  8,  8,  10, 11},
                {4, 4,  7,  7,  9,  9,  8,  9,  8,  9,  11, 11},
                {6, 6,  6,  6,  8,  8,  10, 11, 10, 11, 10, 10},
                {7, 7,  6,  7,  8,  9,  11, 11, 11, 11, 10, 11}
    };
        return uncertaintyComparison[b,a];
    }

    // Obtain Uncertainty Lookup number by criterion. 
    static int uncertaintyConversion( AlienSpeciesAssessment2023Criterion criterion,Dictionary<string, int> stringToUNumber){
        string key = "";
        if(criterion.UncertaintyValues.AsQueryable().Min() < criterion.Value){ key += "><"; };
        key += criterion.Value;
        if(criterion.UncertaintyValues.AsQueryable().Max() > criterion.Value){ key += ">"; };
        return stringToUNumber[key];
    } 

    // Convert C-criteria to conclusion-string
    if (deciciveC)
    {
        int CNumber = uncertaintyConversion(critC,stringToUNumber);
        C_conclusion = numberToConclusionString(CNumber, stringToUNumber);
    }

    // Obtain A/B-relationship by The Matrix, and convert to conclusion-string
    if (deciciveAB)
    {      
        int ANumber = uncertaintyConversion(critA,stringToUNumber);
        int BNumber = uncertaintyConversion(critB,stringToUNumber);
        int ABNumber = uncertaintyLookup(ANumber,BNumber);
        AB_conclusion = numberToConclusionString(ABNumber, stringToUNumber);
    }

    // Follow rules for conclusion strings, as given by Ane :)        
    if(deciciveAB && deciciveC) // both AB & C are decisive criteria
    {
        bool cUP = C_conclusion.Contains("><");
        bool cDown = C_conclusion.Contains("><");
        bool abUP = AB_conclusion.Contains("><");
        bool abDown = AB_conclusion.Contains("><");
        bool cHasUV = cUP || cDown; // C has any uncertainty
        bool abHasUV = abUP || abDown; // AB has any uncertainty

        if(abHasUV != cHasUV) // exclusively C or AB has an uncertainty -> ignore down
        {                
            if(cUP || abUP) // If either has up, we go up.
            {
                x_conclusion += ">";
            }
        }else {                
            if(cUP && abUP && cDown && abDown) // Both have up and down
            {                    
                x_conclusion = "><" + x + ">";
            }else if(cDown && abDown) // Down if both have down
            {                    
                x_conclusion = "><" + x;
            }else if(cUP && abUP) // Up if both have up
            {
                x_conclusion += ">";
            }
        }
    }else if (deciciveAB)
    {
        x_conclusion = AB_conclusion;
    }else if (deciciveC)
    {
        x_conclusion = C_conclusion;
    }

    // Final interpretation of conclusion-string 
    int xHigherUncertainty = x_conclusion.Contains(">")?x+1:x; 
    int xLowerUncertainty =  x_conclusion.Contains("><")?x-1:x;

    // Obtain nice lists
    List<string> uncertaintiesList = new List<string>();  

    List<string> findAllUncertaintyCategories(int x, int y, int xHigh, int xLow, int yHigh, int yLow, List<string> uncertaintiesList)
    {
        string current = @Constants.categoryFromMatrix["" + x + y];
        string xUp = @Constants.categoryFromMatrix["" + xHigh + y];
        string xDown =@Constants.categoryFromMatrix[ "" + xLow + y ];
        string yUp =  @Constants.categoryFromMatrix["" + x + yHigh];
        string yDown =  @Constants.categoryFromMatrix["" + x + yLow];

        if(xUp != current)
        {
            uncertaintiesList.Add(xUp);
        }
        if(xDown != current)
        {
            uncertaintiesList.Add(xDown);
        }
        if(yUp != current)
        {
            uncertaintiesList.Add(yUp);
        }
        if(yDown != current)
        {
            uncertaintiesList.Add(yDown);
        }

        return uncertaintiesList;
    }

    uncertaintiesList = findAllUncertaintyCategories(x, y, xHigherUncertainty, xLowerUncertainty, yHigherUncertainty, yLowerUncertainty,uncertaintiesList);

}

@functions{
    string className(int current_x, int current_y, int place_x, int place_y,int highestUncertainty_y, int lowestUncertainty_y,int highestUncertainty_x, int lowestUncertainty_x){


        string name = "" + current_x + current_y;
        string place = "" + place_x + place_y;
        string classN = "inactive";

        if(current_x == place_x)
        {
            // Add UPWARDS uncertainty to the y-axis only for the current column on the x-axis.
            if (current_y <= highestUncertainty_y && current_y > place_y)
            {
                // y value smaller than the highest cap
                // higher than the risk-levelegory value
                classN = "uncertain";              
            }

            // Add DOWNWARDS uncertainty to the y-axis only for the current column on the x-axis.
            if (current_y >= lowestUncertainty_y && current_y < place_y)
            {
                // y value higher than the lowest cap
                // lower than the risk-levelegory value
                classN = "uncertain";       
            }
        }

        if(current_y == place_y)
        {
            // Add UPWARDS uncertainty to the x-axis only for the current column on the x-axis.
            if (current_x <= highestUncertainty_x && current_x > place_x)
            {

                classN = "uncertain";
            }

            // Add DOWNWARDS uncertainty to the y-axis only for the current column on the x-axis.
            if (current_x >= lowestUncertainty_x && current_x < place_x)
            {
                // y value higher than the lowest cap
                // lower than the risk-levelegory value
                classN = "uncertain";
            }
        }

        if(name == place)
        {
            classN = "active";            
        }

        string categoryKey = "" + current_x + current_y;
        return "risk-level " +  @Constants.categoryFromMatrix[categoryKey] + " " + classN;
    }
}

@functions{
    string findStatus(int current_x, int current_y, int place_x, int place_y,int highestUncertainty_y, int lowestUncertainty_y,int highestUncertainty_x, int lowestUncertainty_x){

        string name = className(current_x, current_y, place_x, place_y, highestUncertainty_y, lowestUncertainty_y, highestUncertainty_x, lowestUncertainty_x);
        if(name == "active")
        {
            return "gjeldende";
        }else if(name == "uncertain")
        {
            return "har usikkerhet";
        }
        else
        {
            return "ikke gjeldende";
        }
    }
}


<h2>@Constants.HeadingsNo.RiskMatrix</h2>
    
<div class="risk-matrix-container">
    <!-- 
        Used the class non-css-only to make the matrix readable for users with css disabled.
        This was not an issue with tables, but would be for grid view with many lists.
        All info given in the non-css-only fields would be easily seen when css is added without these 
        texts which then gets a display:none.
    -->

    <figure class="risk-level-matrix">
        <span class="legend rotate-legend">@Constants.yAxisLabel<span class="non-css-only"> (y-aksen)</span></span>
        <div class="risk-matrix">
            <b class="non-css-only"><br />y = 4</b>
                <ul>                    
                    <li class="description"><span class="non-css-only">@Constants.yAxisLabel: </span><span>4</span> stor</li>
                    <li class="@className(1, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 1: kategori </span><span>PH</span><span class="non-css-only"> er verdien: @findStatus(1, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(2, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 2: kategori </span><span>HI</span><span class="non-css-only"> er verdien: @findStatus(2, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(3, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 3: kategori </span><span>SE</span><span class="non-css-only"> er verdien: @findStatus(3, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(4, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 4: kategori </span><span>SE</span><span class="non-css-only"> er verdien: @findStatus(4, 4, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                </ul>
                <b class="non-css-only"><br />y = 3</b>
                <ul>
                    <li class="description"><span class="non-css-only">@Constants.yAxisLabel: </span><span>3</span> middels</li>
                    <li class="@className(1, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 1: kategori </span><span>LO</span><span class="non-css-only"> er verdien: @findStatus(1, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(2, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 2: kategori </span><span>HI</span><span class="non-css-only"> er verdien: @findStatus(2, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(3, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 3: kategori </span><span>HI</span><span class="non-css-only"> er verdien: @findStatus(3, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(4, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 4: kategori </span><span>SE</span><span class="non-css-only"> er verdien: @findStatus(4, 3, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                </ul>
                <b class="non-css-only"><br />y = 2</b>
                <ul>
                    <li class="description"><span class="non-css-only">@Constants.yAxisLabel: </span><span>2</span> liten</li>
                    <li class="@className(1, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 1: kategori </span><span>LO</span><span class="non-css-only"> er verdien: @findStatus(1, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(2, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 2: kategori </span><span>LO</span><span class="non-css-only"> er verdien: @findStatus(2, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(3, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 3: kategori </span><span>LO</span><span class="non-css-only"> er verdien: @findStatus(3, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="@className(4, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 4: kategori </span><span>HI</span><span class="non-css-only"> er verdien: @findStatus(4, 2, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                </ul>
                <b class="non-css-only"><br />y = 1</b>
                <ul class="bottom-border">
                    <li class="description"><span class="non-css-only">@Constants.yAxisLabel: </span><span>1</span> ingen kjent</li>
                    <li class="nk @className(1, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 1: kategori </span><span>NK</span><span class="non-css-only"> er verdien: @findStatus(1, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="lo @className(2, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 2: kategori </span><span>LO</span><span class="non-css-only"> er verdien: @findStatus(2, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="lo @className(3, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 3: kategori </span><span>LO</span><span class="non-css-only"> er verdien: @findStatus(3, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                    <li class="ph @className(4, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty )"><span class="non-css-only">For @Constants.xAxisLabel (x-aksen) = 4: kategori </span><span>PH</span><span class="non-css-only"> er verdien: @findStatus(4, 1, x, y, yHigherUncertainty, yLowerUncertainty, xHigherUncertainty, xLowerUncertainty ) </span></li>
                </ul>
                <b class="non-css-only"><br />Tallforklaring for x-aksen:</b>
                <ul class="bottom-legend">
                    <span></span>
                    <li class="description"><span>1</span> lite</li>
                    <li class="description"><span>2</span> begrensa</li>
                    <li class="description"><span>3</span> moderat</li>
                    <li class="description"><span>4</span> stor</li>
                </ul>
        </div>
        <span></span>
        <span class="legend">@Constants.xAxisLabel<span class="non-css-only">: @x, @Constants.yAxisLabel: @y </span></span>
        <!--  <a class="info-link" href="/pages/239659" target="_blank">Forklaring på risikomatrisen</a>-->
    </figure>

    <div>

        @Helpers.FixSpeciesLevel("{Art}en", (int)Model.Assessment.ScientificNameRank) har @Model.Assessment.Category - 
        @Model.Assessment.Category.DisplayName()<span is-visible="uncertaintiesList.Count>0">, med usikkerhet til </span>
        <!-- 
            This Display below of the uncertainties ignores same-category variation, which are displayed in the matrix
            The same info should preferrably be availiable in the main text, to aid users who cannot view the image optimally.
            Also it would look nicer. yeh. All uncertainty x,y's are now input in the findAllUncertaintyCategories use of the matrix lookup.
        -->
        @{
            for (int i = 0; i < uncertaintiesList.Count; i++) {
                <span>@uncertaintiesList[i].ToUpper() - @Constants.categoryStringFromCode[@uncertaintiesList[i]]</span>
                 if (i == uncertaintiesList.Count - 2) {
                       <span> og </span>
                 }else if (i != uncertaintiesList.Count - 1) {
                       <span>,</span>
                 }
            }
        }
    </div>
</div>

